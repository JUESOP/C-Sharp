//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// 
//
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;
using OpenMES.UI.Infrastructure.Interface;
using OpenMES.UI.CommonUtil;
using System.Collections;
using DevExpress.XtraGrid.Views.Grid;
using System.Drawing;
using OpenMES.UI.Infrastructure.Interface.Constants;

namespace OpenMES.UI.MaterialControl
{
	public partial class FormMMMaterial : ParentViewReportGenerator, IFormMMMaterial
	{
		#region Variable

		private MesGridLookUpCombo cboMaterialType;

		#endregion Variable


		public FormMMMaterial()
		{
			InitializeComponent();
		}

		protected override void OnLoad(EventArgs e)
		{
			_presenter.OnViewReady();
			base.OnLoad(e);

			this.InitializeControl();
			this.InitializeGrid();
			this.InitializeEvent();
		}

		protected override void SearchData()
		{
			SplashForm.ShowSplash();
			base.SearchData();
			SplashForm.HideSplash();
		}

		private void InitializeControl()
		{

			cboMaterialType = GetConditionControl<MesGridLookUpCombo>("MATERIALTYPE");
		}

		private void InitializeGrid()
		{
			this.grdList.gridView.Columns["QTY"].DisplayFormat.FormatType = DevExpress.Utils.FormatType.Numeric;
			this.grdList.gridView.Columns["QTY"].DisplayFormat.FormatString = "";
		}

		private void InitializeEvent()
		{
			this.grdList.CustemMenuItems.Add(new DevExpress.Utils.Menu.DXMenuItem("자재 상세정보 조회", new EventHandler(this.SearchMaterialDetail)));

			foreach (System.Windows.Forms.Control control in tblCondition.Controls)
			{
				if (control.GetType() == typeof(CusTextEdit))
				{
					CusTextEdit txtEdit = (CusTextEdit)control;
					if (txtEdit.Name == "MATERIALDEFINITIONID")
						txtEdit.KeyDown += new System.Windows.Forms.KeyEventHandler(this.TextEdit_KeyDown);
				}
			}
		}

		void SearchMaterialDetail(object sender, EventArgs e)
		{
			SplashForm.ShowSplash();
			string materialdefinitionid = this.grdList.gridView.GetFocusedRowCellValue("MATERIALDEFINITIONID").To<string>();
			string warehouse = this.grdList.gridView.GetFocusedRowCellValue("WAREHOUSE").To<string>();

			if (materialdefinitionid.IsNullOrEmpty()) return;

			var htParam = new Hashtable();
			htParam.Add("MATERIALDEFINITIONID", materialdefinitionid);
			htParam.Add("WAREHOUSE", warehouse);
			OpenView("FormMMMaterialDetail", htParam);
			SplashForm.HideSplash();
		}

		private void TextEdit_KeyDown(object sender, KeyEventArgs e)
		{
			if (e.KeyCode == Keys.Enter)
				SearchData();
		}

		private void btnMaterialMove_Click(object sender, EventArgs e)
		{
			string materialdefinitionid = this.grdList.gridView.GetFocusedRowCellValue("MATERIALDEFINITIONID").To<string>();

			if (materialdefinitionid.IsNullOrEmpty())
			{
				//선택된 자재가 없습니다.
				MesSmallMessageBox.ShowDialog("MSG00379", CODESUBTYPE.MESSAGE, true, null);
				return;
			}
			var ht = new Hashtable();
			ht["MATERIALDEFINITIONID"] = this.grdList.gridView.GetFocusedRowCellValue("MATERIALDEFINITIONID");
			ht["MATERIALDEFINITIONNAME"] = this.grdList.gridView.GetFocusedRowCellValue("MATERIALDEFINITIONNAME");
			ht["WAREHOUSE"] = this.grdList.gridView.GetFocusedRowCellValue("WAREHOUSE");

			if (WorkItem.SmartParts.Contains("A"))
			{
				WorkItem.SmartParts.Remove(WorkItem.SmartParts.Get("A"));
			}

			var result = ShowPopup<PopupMaterialMove>("PopupMaterialMove", ht);
			if (result == DialogResult.OK)
			{
				SearchData();
			}
		}

		private void btnMaterialReturn_Click(object sender, EventArgs e)
		{
			string materialdefinitionid = this.grdList.gridView.GetFocusedRowCellValue("MATERIALDEFINITIONID").To<string>();

			if (materialdefinitionid.IsNullOrEmpty())
			{
				//선택된 자재가 없습니다.
				MesSmallMessageBox.ShowDialog("MSG00379", CODESUBTYPE.MESSAGE, true, null);
				return;
			}
			if (this.grdList.gridView.GetFocusedRowCellValue("ISSUEDMESLOCATIONYN").To<string>() == "Y")
			{
				//출고창고가 MES위치인 경우 자재반납을 수행할 수 없습니다.
				MesSmallMessageBox.ShowDialog("MSG00443", CODESUBTYPE.MESSAGE, true, null);
				return;
			}
			var ht = new Hashtable();
			ht["MATERIALDEFINITIONID"] = this.grdList.gridView.GetFocusedRowCellValue("MATERIALDEFINITIONID");
			ht["MATERIALDEFINITIONNAME"] = this.grdList.gridView.GetFocusedRowCellValue("MATERIALDEFINITIONNAME");
			ht["WAREHOUSE"] = this.grdList.gridView.GetFocusedRowCellValue("WAREHOUSE");

			var result = ShowPopup<PopupMaterialReturn>("PopupMaterialReturn", ht);
			if (result == DialogResult.OK)
			{
				SearchData();
			}
		}

		private void btnMaterialConsume_Click(object sender, EventArgs e)
		{
			string materialdefinitionid = this.grdList.gridView.GetFocusedRowCellValue("MATERIALDEFINITIONID").To<string>();

			if (materialdefinitionid.IsNullOrEmpty())
			{
				//선택된 자재가 없습니다.
				MesSmallMessageBox.ShowDialog("MSG00379", CODESUBTYPE.MESSAGE, true, null);
				return;
			}
			var ht = new Hashtable();
			ht["MATERIALDEFINITIONID"] = this.grdList.gridView.GetFocusedRowCellValue("MATERIALDEFINITIONID");
			ht["MATERIALDEFINITIONNAME"] = this.grdList.gridView.GetFocusedRowCellValue("MATERIALDEFINITIONNAME");
			ht["WAREHOUSE"] = this.grdList.gridView.GetFocusedRowCellValue("WAREHOUSE");

			var result = ShowPopup<PopupMaterialConsume>("PopupMaterialConsume", ht);
			if (result == DialogResult.OK)
			{
				SearchData();
			}
		}
	}
}

