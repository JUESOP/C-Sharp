//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// 
//
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;
using OpenMES.UI.Infrastructure.Interface;
using OpenMES.UI.Infrastructure.Library;
using OpenMES.UI.Infrastructure.Interface.Services;
using OpenMES.UI.CommonUtil;
using OpenMES.UI.Infrastructure.Interface.Constants;
using System.Collections.Generic;
using System.Data;
using System.Collections;
using OpenMES.UI.CommonMessage.Services;
using DevExpress.Utils;
using DevExpress.XtraGrid.Views.Grid;
using DevExpress.XtraGrid.Views.Grid.ViewInfo;
using CIM.MES.Common.Data;
using DevExpress.XtraEditors.Repository;
using System.IO;
using DevExpress.XtraGrid.Columns;
using DevExpress.XtraEditors;
using System.Net;
using System.Text;

namespace OpenMES.UI.QualityManagement
{
	public partial class QM_210 : ParentViewLayer2, IQM_210
	{
		DataSet dsGridMasterInfo = null;
		private IMessageService _MessageService;

		PopupProduct popProduct = new PopupProduct();
		PopupCustomer popCustomer = new PopupCustomer();
		CustomerMail popMail = new CustomerMail();
		PopupUser popUser = new PopupUser();
		PopupQM_110 pop110 = new PopupQM_110();

		//FTP Setting
		//Server
		private static string strHostName = "10.204.116.107";
		private static string strUserName = "skcsjdadm";
		private static string strPassword = "#MqwDdb119)";
		private static string strSACurrentDirectory = "SAConplaintAttach";
		private static string strQACurrentDirectory = "QAConplaintAttach";

		RepositoryItemButtonEdit buttonEdit = new RepositoryItemButtonEdit();

		public QM_210()
		{
			InitializeComponent();
		}

		protected override void OnLoad(EventArgs e)
		{
			_MessageService = _presenter.MessageService;
			_presenter.OnViewReady();

			InitializeEvent();
			InitializeCombo();
			this.InitControls();
			InitializeGrid();
			InitializeTab();
			base.OnLoad(e);
		}

		private void InitializeEvent()
		{
			this.btnSearch.Click += BtnSearch_Click;
			this.btnSave.Click += BtnSave_Click;
			this.btnNew.Click += BtnNew_Click;
			this.btnDelete.Click += BtnDelete_Click;
			this.btnComplate.Click += BtnComplate_Click;

			this.grdList.gridView.DoubleClick += GridView_DoubleClick;
			this.grdMail.gridView.DoubleClick += GrdMail_DoubleClick;
			this.tabSub.SelectedPageChanged += TabSub_SelectedPageChanged;

			//팝업 이밴트
			this.txtSubReciverName.DoubleClick += TxtSubReciverName_DoubleClick;
			this.txtSubReciverName.PreviewKeyDown += TxtSubReciverName_PreviewKeyDown;

			this.txtRecivePerson.DoubleClick += TxtRecivePerson_DoubleClick;
			this.txtRecivePerson.PreviewKeyDown += TxtRecivePerson_PreviewKeyDown;

			//제품
			this.txtProductCode.DoubleClick += TxtProductCode_DoubleClick;
			this.txtProductCode.PreviewKeyDown += TxtProductCode_PreviewKeyDown;

			this.txtSubProductDefinitionID.DoubleClick += TxtSubProductDefinitionID_DoubleClick;
			this.txtSubProductDefinitionID.PreviewKeyDown += TxtSubProductDefinitionID_PreviewKeyDown;

			//고객사
			this.txtClientName.DoubleClick += TxtClientName_DoubleClick;
			this.txtClientName.PreviewKeyDown += TxtClientName_PreviewKeyDown;

			this.txtSubClientName.DoubleClick += TxtSubClientName_DoubleClick;
			this.txtSubClientName.PreviewKeyDown += TxtSubClientName_PreviewKeyDown;

			//첨부파일 이밴트
			this.btnSAttachFileAdd.Click += BtnSAttachFileAdd_Click;
			this.btnSAttachFileDelete.Click += BtnSAttachFileDelete_Click;
			this.btnSAttachFileDownload.Click += BtnSAttachFileDownload_Click;

			this.btnQAttachFileAdd.Click += BtnQAttachFileAdd_Click;
			this.btnQAttachFileDelete.Click += BtnQAttachFileDelete_Click;
			this.btnQAttachFileDownload.Click += BtnQAttachFileDownload_Click;

			buttonEdit.Click += ButtonEdit_Click;

			//1차회신일 수정시
			this.dtpSubOneReplyingDate.EditValueChanged += DtpSubOneReplyingDate_EditValueChanged;
		}

		private void TxtClientName_PreviewKeyDown(object sender, PreviewKeyDownEventArgs e)
		{
			if (e.KeyCode == Keys.Back || e.KeyCode == Keys.Delete)
			{
				this.txtClientID.Clear();
				this.txtClientName.Clear();
			}
		}

		private void TxtClientName_DoubleClick(object sender, EventArgs e)
		{
			DialogResult dialogResult = PopupCustomer();
			if (dialogResult == DialogResult.OK)
			{
				DataRow dr = popCustomer._dr;
				this.txtClientName.Text = dr["CUSTOMERNAME"].ToString();
				this.txtClientID.Text = dr["CUSTOMERID"].ToString();
			}
		}

		private void TabSub_SelectedPageChanged(object sender, DevExpress.XtraTab.TabPageChangedEventArgs e)
		{
			PopupQM_110 pop110 = new PopupQM_110();
			if (Application.OpenForms.Count > 0)
			{
				foreach (Form openPopup in Application.OpenForms)
				{
					if (openPopup.Name == "PopupQM_110")
					{
						openPopup.Close();
						break;
					}
				}
			}

			if (tabSub.SelectedTabPageIndex == 2)
			{
				//영업정보 팝업창 Show
				pop110.TopMost = true;
				pop110.Text = NLSService.GetNLSLabelInfo("CUSTOMERDISCONTENTSAVE_SM");
				pop110.Enabled = false;
				pop110.StartPosition = FormStartPosition.CenterParent;

				pop110._presenter = _presenter;
				pop110.txtSubReciveNo.Text = this.txtSubReciveNo.Text;
				pop110.dtpSubReciveDate.EditValue = this.dtpSubReciveDate.EditValue;
				pop110.txtSubReciverName.Text = this.txtSubReciverName.Text;
				pop110.txtSubReciverID.Text = this.txtSubReciverID.Text;
				pop110.cboSubComplaintType.EditValue = this.cboSubComplaintType.EditValue;
				pop110.txtSubClientName.Text = this.txtSubClientName.Text;
				pop110.txtSubCountryCode.Text = this.txtSubCountryCode.Text;
				pop110.txtSubClientID.Text = this.txtSubClientID.Text;
				pop110.txtSubEndCustomer.Text = this.txtSubEndCustomer.Text;
				pop110.txtSubLine.Text = this.txtSubLine.Text;
				pop110.txtSubProcessName.Text = this.txtSubProcessName.Text;
				pop110.txtSubCustEqpName.Text = this.txtSubCustEqpName.Text;
				pop110.txtSubUseTemp.Text = this.txtSubUseTemp.Text;
				pop110.txtSubUsePressure.Text = this.txtSubUsePressure.Text;
				pop110.txtSubGas.Text = this.txtSubGas.Text;
				pop110.txtSubComplaint.Text = this.txtSubComplaint.Text;
				pop110.cboSubPlantDivisionID.EditValue = this.cboSubPlantDivisionID.EditValue;
				pop110.cboSubTexture.EditValue = this.cboSubTexture.EditValue;
				pop110.txtSubProductDefinitionID.Text = this.txtSubProductDefinitionID.Text;
				pop110.txtSubProductDefinitionNM.Text = this.txtSubProductDefinitionNM.Text;
				pop110.dtpSubShipmentDate.EditValue = this.dtpSubShipmentDate.EditValue;
				pop110.txtSubBadCount.Text = this.txtSubBadCount.Text;
				pop110.txtSubReciveCount.Text = this.txtSubReciveCount.Text;
				pop110.dtpSubComReciveDate.EditValue = this.dtpSubComReciveDate.EditValue;
				pop110.txtSubComReciveCount.Text = this.txtSubComReciveCount.Text;
				pop110.dtpSubChangShippingDate.EditValue = this.dtpSubChangShippingDate.EditValue;
				pop110.txtSubChangShippingCount.Text = this.txtSubChangShippingCount.Text;
				pop110.txtSubRemark.Text = this.txtSubRemark.Text;

				pop110.dt = this.grdMail.GetDataTable();

				pop110.Show();
			}
		}

		private void DtpSubOneReplyingDate_EditValueChanged(object sender, EventArgs e)
		{
			if (dtpSubOneReplyingDate.EditValue.IsNullOrEmpty()) return;
            if (this.dtpSubLastReplyingDate.EditValue.IsNullOrEmpty()) return;
			if (string.IsNullOrEmpty(this.dtpSubLastReplyingDate.EditValue.ToString()))
			{
				this.dtpSubLastReplyingDate.EditValue = this.dtpSubOneReplyingDate.EditValue;
			}
		}
		
		private void TxtRecivePerson_PreviewKeyDown(object sender, PreviewKeyDownEventArgs e)
		{
			if (e.KeyCode == Keys.Back || e.KeyCode == Keys.Delete)
			{
				this.txtRecivePerson.Clear();
				this.txtReceverID.Clear();
			}
		}

		private void TxtSubReciverName_PreviewKeyDown(object sender, PreviewKeyDownEventArgs e)
		{
			if (e.KeyCode == Keys.Back || e.KeyCode == Keys.Delete)
			{
				this.txtSubReciverName.Clear();
				this.txtSubReciverID.Clear();
			}
		}

		private void TxtRecivePerson_DoubleClick(object sender, EventArgs e)
		{
			try
			{
				DialogResult dialogResult = PopupUser();
				if (dialogResult == DialogResult.OK)
				{
					DataRow dr = popUser._dr;
					this.txtRecivePerson.Text = dr["USERNAME"].ToString();
					this.txtReceverID.Text = dr["USERID"].ToString();
				}

			}
			catch (Exception ex)
			{
				MesMessageBox.ShowDialog(ex.Message, ex.ToString(), CODESUBTYPE.ERROR, false, null);
			}
		}
		
		private void TxtSubReciverName_DoubleClick(object sender, EventArgs e)
		{
			try
			{
				DialogResult dialogResult = PopupUser();
				if (dialogResult == DialogResult.OK)
				{
					DataRow dr = popUser._dr;
					this.txtSubReciverName.Text = dr["USERNAME"].ToString();
					this.txtSubReciverID.Text = dr["USERID"].ToString();
				}

			}
			catch (Exception ex)
			{
				MesMessageBox.ShowDialog(ex.Message, ex.ToString(), CODESUBTYPE.ERROR, false, null);
			}
		}

		private DialogResult PopupUser()
		{
			try
			{
				popUser = new PopupUser();

				if (_presenter.WorkItem.SmartParts.Contains("PopupUser"))
				{
					_presenter.WorkItem.SmartParts.Remove(_presenter.WorkItem.SmartParts.Get<PopupUser>("PopupUser"));
				}

				SplashForm.HideSplash();

				popUser = _presenter.WorkItem.SmartParts.AddNew<PopupUser>("PopupUser");
				popUser.Title = NLSService.GetNLSLabelInfo("User List");
				_presenter.WorkItem.Workspaces[CommonUtil.Constants.WorkspaceNames.PopupWorkspace].Show(popUser);
			}
			catch (Exception ex)
			{
				MesMessageBox.ShowDialog(ex.Message, ex.ToString(), CODESUBTYPE.ERROR, false, null);
			}

			return popUser.DialogResult;
		}

		private void GrdMail_DoubleClick(object sender, EventArgs e)
		{
			try
			{
				DialogResult dialogResult = PopupMail();

				if (dialogResult == DialogResult.OK)
				{
					DataTable dt = popMail._dt;
					grdMail.BindNLS(dt);
				}

			}
			catch (Exception ex)
			{
				MesMessageBox.ShowDialog(ex.Message, ex.ToString(), CODESUBTYPE.ERROR, false, null);
			}
		}

		private DialogResult PopupMail()
		{
			try
			{
				popMail = new CustomerMail();

				if (_presenter.WorkItem.SmartParts.Contains("CustomerMail"))
				{
					_presenter.WorkItem.SmartParts.Remove(_presenter.WorkItem.SmartParts.Get<CustomerMail>("CustomerMail"));
				}

				SplashForm.HideSplash();

				popMail = _presenter.WorkItem.SmartParts.AddNew<CustomerMail>("CustomerMail");
				popMail._dt = (this.grdMail.gridControl.DataSource as DataTable);
				
				popMail.Title = NLSService.GetNLSLabelInfo("MAILADDRESS");
				_presenter.WorkItem.Workspaces[CommonUtil.Constants.WorkspaceNames.PopupWorkspace].Show(popMail);
			}
			catch (Exception ex)
			{
				MesMessageBox.ShowDialog(ex.Message, ex.ToString(), CODESUBTYPE.ERROR, false, null);
			}

			return popMail.DialogResult;
		}

		private void BtnQAttachFileDownload_Click(object sender, EventArgs e)
		{
			DataRow dr = grdAttachFile2.gridView.GetFocusedDataRow();
            if (dr == null)
            {
                MesSmallMessageBox.ShowDialog("다운로드 할 파일이 없습니다.", CODESUBTYPE.MESSAGE, true, null);
                return;
            }
            string strFTPPath = dr["FTPPATH"].ToString();
			string strSavePath = dr["SAVEPATH"].ToString();
			string strFileName = dr["ATTACHFILENAME"].ToString();
			string strFileType = dr["FILETYPE"].ToString();

			FTPClient ftp = new FTPClient(strHostName, strUserName, strPassword, strQACurrentDirectory);
			string strUrl = strFTPPath + "/" + strSavePath + "/" + strFileName;

			ftp.FtpDownloadFile(strFileName, strUrl);
		}

		private void BtnQAttachFileDelete_Click(object sender, EventArgs e)
		{
			DataRow dr = grdAttachFile2.gridView.GetFocusedDataRow();
            if(dr == null)
            {
                MesSmallMessageBox.ShowDialog("삭제 할 파일이 없습니다.", CODESUBTYPE.MESSAGE, true, null);
                return;
            }
			string strAttachSeq = dr["ATTACHFILESEQ"].ToString();
			string strManageNo = dr["MANAGENO"].ToString();

			string strFTPPath = dr["FTPPATH"].ToString();
			string strSavePath = dr["SAVEPATH"].ToString();
			string strFileName = dr["ATTACHFILENAME"].ToString();
			string strFileType = dr["FILETYPE"].ToString();

			FTPClient ftp = new FTPClient(strHostName, strUserName, strPassword, strQACurrentDirectory);
			string strUrl = strFTPPath + "/" + strSavePath + "/" + strFileName;
			ftp.FtpDeleteFile(strUrl);

			DeleteAttachData1(strAttachSeq, strManageNo);
		}

		private void BtnQAttachFileAdd_Click(object sender, EventArgs e)
		{
			if (string.IsNullOrWhiteSpace(this.txtSubReciveNo.Text))
			{
				//메시지 : 기존 Data 저장후 첨부파일을 추가해 주세요
				MesSmallMessageBox.ShowDialog(MesNLSCode.QMS0004, CODESUBTYPE.MESSAGE, true, null);
				return;
			}
			string strManage = this.txtSubReciveNo.Text;
			//FTP 연결 테스트
			//FTP File 저장
			string strFTPDirectory = string.Empty;          //User에게 Open하는 경로
			string strFTPFullPath = string.Empty;
			string strSubDirectory = DateTime.Now.ToString("yyyyMMdd");

			OpenFileDialog ofd = new OpenFileDialog();
			ofd.Filter = "All File(*.*)|*.*";
			ofd.InitialDirectory = ".";
			ofd.Title = "Select a file";
			if (ofd.ShowDialog() != DialogResult.OK)
			{
				return;
			}
			else
			{
				FileInfo fInfo = new FileInfo(ofd.FileName);

				//FTP 정보 Setting
				string strFTPPath = @"ftp://" + strHostName;
				string strSavePath = strQACurrentDirectory + "/" + strSubDirectory;
				string strAttachFileName = ofd.SafeFileName;
				string strFileType = fInfo.Extension.ToString().Replace(".", "").Trim().ToUpper();
				string strUplaodPath = ofd.FileName;

				if (FTPDataTransport(strSubDirectory, strAttachFileName, strUplaodPath, strSavePath, true) == true)
				{
					//참조DB 저장
					SaveAttachData2(strFTPPath, strSavePath, strAttachFileName, strFileType, strUplaodPath, strManage);
				}
				else
				{
					//메시지 : FTP로 파일 이동을 실패 하였습니다. 
					MesSmallMessageBox.ShowDialog(MesNLSCode.QMS0001, CODESUBTYPE.MESSAGE, true, null);
					return;
				}
			}
		}

		private void ButtonEdit_Click(object sender, EventArgs e)
		{
			try
			{
				DataRow dr = null;
				FTPClient ftp = null;
				if (tabSub.SelectedTabPageIndex == 1)
				{
					dr = grdAttachFile1.gridView.GetFocusedDataRow();
					ftp = new FTPClient(strHostName, strUserName, strPassword, strSACurrentDirectory);
				}
				else if (tabSub.SelectedTabPageIndex == 3)
				{
					dr = grdAttachFile2.gridView.GetFocusedDataRow();
					ftp = new FTPClient(strHostName, strUserName, strPassword, strQACurrentDirectory);
				}

				string strFTPPath = dr["FTPPATH"].ToString();
				string strSavePath = dr["SAVEPATH"].ToString();
				string strFileName = dr["ATTACHFILENAME"].ToString();

				string strTmpUrl = Application.StartupPath;

				string strUrl = strFTPPath + "/" + strSavePath + "/" + strFileName;

				ftp.FtpDownloadFile(strFileName, strUrl, strTmpUrl, true, true);

			}
			catch (Exception ex)
			{
				MesMessageBox.ShowDialog(ex.Message, CODESUBTYPE.ERROR, null);
			}
		}

		private void BtnSAttachFileDownload_Click(object sender, EventArgs e)
		{
			DataRow dr = grdAttachFile1.gridView.GetFocusedDataRow();
            if (dr == null)
            {
                MesSmallMessageBox.ShowDialog("다운로드 할 파일이 없습니다.", CODESUBTYPE.MESSAGE, true, null);
                return;
            }
            string strFTPPath = dr["FTPPATH"].ToString();
			string strSavePath = dr["SAVEPATH"].ToString();
			string strFileName = dr["ATTACHFILENAME"].ToString();
			string strFileType = dr["FILETYPE"].ToString();

			FTPClient ftp = new FTPClient(strHostName, strUserName, strPassword, strSACurrentDirectory);
			string strUrl = strFTPPath + "/" + strSavePath + "/" + strFileName;

			ftp.FtpDownloadFile(strFileName, strUrl);
		}

		private void BtnSAttachFileDelete_Click(object sender, EventArgs e)
		{
			DataRow dr = grdAttachFile1.gridView.GetFocusedDataRow();
            if(dr == null)
            {
                MesSmallMessageBox.ShowDialog("삭제할 파일이 없습니다.", CODESUBTYPE.MESSAGE, true, null);
                return;
            }
			string strAttachSeq = dr["ATTACHFILESEQ"].ToString();
			string strManageNo = dr["MANAGENO"].ToString();

			string strFTPPath = dr["FTPPATH"].ToString();
			string strSavePath = dr["SAVEPATH"].ToString();
			string strFileName = dr["ATTACHFILENAME"].ToString();
			string strFileType = dr["FILETYPE"].ToString();

			FTPClient ftp = new FTPClient(strHostName, strUserName, strPassword, strSACurrentDirectory);
			string strUrl = strFTPPath + "/" + strSavePath + "/" + strFileName;
			ftp.FtpDeleteFile(strUrl);

			DeleteAttachData1(strAttachSeq, strManageNo);
		}

		private void DeleteAttachData1(string strAttachSeq, string strManageNo)
		{
			try
			{
				Hashtable hash = new Hashtable();
				hash["_REQUESTTYPE"] = "DELETE";
				hash["_VERSION"] = "001";
				hash["_CLASSID"] = "MES_UI_QM";//클래스 아이디
				hash["SITEID"] = UIConstants.SiteId;
				hash["MANAGENO"] = strManageNo;
				hash["ATTACHFILESEQ"] = strAttachSeq;

				CommonAttach comAttach = new QualityManagement.CommonAttach();
				MessageData returnData = comAttach.SetAttachData(_MessageService, hash);

				if (returnData.ISSUCCESS == false)
				{
					MesMessageBox.ShowDialog(returnData.MESSAGE, CODESUBTYPE.MESSAGE, true, null);
				}
				else
				{
					//MesSmallMessageBox.ShowDialog(MesNLSCode.INF0004, CODESUBTYPE.MESSAGE, true, null); //저장 되었습니다.
					AttachDataLoad1(strManageNo);
				}
			}
			catch (Exception ex)
			{
				SplashForm.HideSplash();
				MesMessageBox.ShowDialog(ex.Message, CODESUBTYPE.ERROR, null);
			}
		}

		private void BtnSAttachFileAdd_Click(object sender, EventArgs e)
		{
			if (string.IsNullOrWhiteSpace(this.txtSubReciveNo.Text))
			{
				//메시지 : 기존 Data 저장후 첨부파일을 추가해 주세요
				MesSmallMessageBox.ShowDialog(MesNLSCode.QMS0004, CODESUBTYPE.MESSAGE, true, null);
				return;
			}
			string strManage = this.txtSubReciveNo.Text;
			//FTP 연결 테스트
			//FTP File 저장
			string strFTPDirectory = string.Empty;          //User에게 Open하는 경로
			string strFTPFullPath = string.Empty;
			string strSubDirectory = DateTime.Now.ToString("yyyyMMdd");

			OpenFileDialog ofd = new OpenFileDialog();
			ofd.Filter = "All File(*.*)|*.*";
			ofd.InitialDirectory = ".";
			ofd.Title = "Select a file";
			if (ofd.ShowDialog() != DialogResult.OK)
			{
				return;
			}
			else
			{
				FileInfo fInfo = new FileInfo(ofd.FileName);

				//FTP 정보 Setting
				string strFTPPath = @"ftp://" + strHostName;
				string strSavePath = strSACurrentDirectory + "/" + strSubDirectory;
				string strAttachFileName = ofd.SafeFileName;
				string strFileType = fInfo.Extension.ToString().Replace(".", "").Trim().ToUpper();
				string strUplaodPath = ofd.FileName;

				if (FTPDataTransport(strSubDirectory, strAttachFileName, strUplaodPath, strSavePath, true) == true)
				{
					//참조DB 저장
					SaveAttachData1(strFTPPath, strSavePath, strAttachFileName, strFileType, strUplaodPath, strManage);
				}
				else
				{
					//메시지 : FTP로 파일 이동을 실패 하였습니다. 
					MesSmallMessageBox.ShowDialog(MesNLSCode.QMS0001, CODESUBTYPE.MESSAGE, true, null);
					return;
				}
			}
		}

		private bool FTPDataTransport(string strSubDirectory, string strAttachFileName, string strUplaodPath, string strSavePath, bool Overwrite = true)
		{
			try
			{
				FTPClient ftp = new FTPClient(strHostName, strUserName, strPassword, strSavePath.Substring(0, strSavePath.IndexOf('/')));
				//FTPClient ftp = new FTPClient(strHostName, strUserName, strPassword, strSACurrentDirectory);

				if (ftp.FtpDirectoryExists(strSubDirectory) == false)
				{
					ftp.QM_FtpCreateDirectory(strSubDirectory);
				}
				ftp.FtpUploadFile(strAttachFileName, strUplaodPath, strSavePath, Overwrite);
				return true;
			}
			catch (Exception ex)
			{
				MesMessageBox.ShowDialog(ex.Message, CODESUBTYPE.ERROR, null);
				return false;
			}
		}

		private void SaveAttachData1(string strFTPPath, string strSavePath, string strAttachFileName, string strFileType, string strUplaodPath, string strManage)
		{
			try
			{
				Hashtable hash = new Hashtable();
				hash["_REQUESTTYPE"] = "INSERT";
				hash["_VERSION"] = "001";
				hash["_CLASSID"] = "MES_UI_QM";//클래스 아이디
				hash["SITEID"] = UIConstants.SiteId;
				hash["MENUID"] = _MenuItem.ID;
				hash["MANAGENO"] = strManage;
				hash["ATTACHFILENAME"] = strAttachFileName;
				hash["UPLOADPATH"] = strUplaodPath;
				hash["FTPPATH"] = strFTPPath;
				hash["SAVEPATH"] = strSavePath;
				hash["FILETYPE"] = strFileType;
				hash["DEPTFILINDEX"] = 1;

				CommonAttach comAttach = new QualityManagement.CommonAttach();
				MessageData returnData = comAttach.SetAttachData(_MessageService, hash);

				if (returnData.ISSUCCESS == false)
				{
					MesMessageBox.ShowDialog(returnData.MESSAGE, CODESUBTYPE.MESSAGE, true, null);
				}
				else
				{
					//MesSmallMessageBox.ShowDialog(MesNLSCode.INF0004, CODESUBTYPE.MESSAGE, true, null); //저장 되었습니다.
					AttachDataLoad1(strManage);
				}
			}
			catch (Exception ex)
			{
				SplashForm.HideSplash();
				MesMessageBox.ShowDialog(ex.Message, CODESUBTYPE.ERROR, null);
			}
		}

		private void SaveAttachData2(string strFTPPath, string strSavePath, string strAttachFileName, string strFileType, string strUplaodPath, string strManage)
		{
			try
			{
				Hashtable hash = new Hashtable();
				hash["_REQUESTTYPE"] = "INSERT";
				hash["_VERSION"] = "001";
				hash["_CLASSID"] = "MES_UI_QM";//클래스 아이디
				hash["SITEID"] = UIConstants.SiteId;
				hash["MENUID"] = _MenuItem.ID;
				hash["MANAGENO"] = strManage;
				hash["ATTACHFILENAME"] = strAttachFileName;
				hash["UPLOADPATH"] = strUplaodPath;
				hash["FTPPATH"] = strFTPPath;
				hash["SAVEPATH"] = strSavePath;
				hash["FILETYPE"] = strFileType;
				hash["DEPTFILINDEX"] = 2;

				CommonAttach comAttach = new QualityManagement.CommonAttach();
				MessageData returnData = comAttach.SetAttachData(_MessageService, hash);

				if (returnData.ISSUCCESS == false)
				{
					MesMessageBox.ShowDialog(returnData.MESSAGE, CODESUBTYPE.MESSAGE, true, null);
				}
				else
				{
					//MesSmallMessageBox.ShowDialog(MesNLSCode.INF0004, CODESUBTYPE.MESSAGE, true, null); //저장 되었습니다.
					AttachDataLoad2(strManage);
				}
			}
			catch (Exception ex)
			{
				SplashForm.HideSplash();
				MesMessageBox.ShowDialog(ex.Message, CODESUBTYPE.ERROR, null);
			}
		}

		private void AttachDataLoad1(string strManage)
		{
			grdAttachFile1.DataBindings.Clear();
			grdAttachFile1.gridControl.DataSource = null;

			MessageData mesRequestData = new MessageData();
			Hashtable hash = new Hashtable();
			hash["_REQUESTTYPE"] = "INQUERY";
			hash["_VERSION"] = "001";
			hash["_CLASSID"] = "MES_UI_QM";//클래스 아이디
			hash["SITEID"] = UIConstants.SiteId;
			hash["MENUID"] = _MenuItem.ID;
			hash["MANAGENO"] = strManage;
			hash["DEPTFILINDEX"] = 1;

			mesRequestData.COMMAND = @"RuleCommonAttach";
			mesRequestData.QUERYID = "GET_QMCommon_DeptAttach";
			mesRequestData.SITEID = UIConstants.SiteId;
			mesRequestData.HASHTABLE = hash;
			mesRequestData.COMMANDTYPE = @"StoredQuery";

			MessageData replyData = _MessageService.SendRequestOIMessageData(mesRequestData);

			if (replyData.ISSUCCESS)
			{
				if (replyData.DATATABLE != null || replyData.DATATABLE.Rows.Count != 0)
				{
					this.grdAttachFile1.BindNLS(replyData.DATATABLE);
				}
			}
			else
			{
				MesSmallMessageBox.ShowDialog(replyData.MESSAGE, CODESUBTYPE.MESSAGE, true, null);
			}
		}

		private void AttachDataLoad2(string strManage)
		{
			grdAttachFile2.DataBindings.Clear();
			grdAttachFile2.gridControl.DataSource = null;

			MessageData mesRequestData = new MessageData();
			Hashtable hash = new Hashtable();
			hash["_REQUESTTYPE"] = "INQUERY";
			hash["_VERSION"] = "001";
			hash["_CLASSID"] = "MES_UI_QM";//클래스 아이디
			hash["SITEID"] = UIConstants.SiteId;
			hash["MENUID"] = _MenuItem.ID;
			hash["MANAGENO"] = strManage;
			hash["DEPTFILINDEX"] = 2;

			mesRequestData.COMMAND = @"RuleCommonAttach";
			mesRequestData.QUERYID = "GET_QMCommon_DeptAttach";
			mesRequestData.SITEID = UIConstants.SiteId;
			mesRequestData.HASHTABLE = hash;
			mesRequestData.COMMANDTYPE = @"StoredQuery";

			MessageData replyData = _MessageService.SendRequestOIMessageData(mesRequestData);

			if (replyData.ISSUCCESS)
			{
				if (replyData.DATATABLE != null || replyData.DATATABLE.Rows.Count != 0)
				{
					this.grdAttachFile2.BindNLS(replyData.DATATABLE);
				}
			}
			else
			{
				MesSmallMessageBox.ShowDialog(replyData.MESSAGE, CODESUBTYPE.MESSAGE, true, null);
			}
		}

		private void TxtSubClientName_PreviewKeyDown(object sender, PreviewKeyDownEventArgs e)
		{
			if (e.KeyCode == Keys.Back || e.KeyCode == Keys.Delete)
			{
				this.txtSubClientID.Clear();
				this.txtSubClientName.Clear();
				this.txtSubCountryCode.Clear();
			}
		}

		private void TxtSubClientName_DoubleClick(object sender, EventArgs e)
		{
			DialogResult dialogResult = PopupCustomer();
			if (dialogResult == DialogResult.OK)
			{
				DataRow dr = popCustomer._dr;
				this.txtSubClientName.Text = dr["CUSTOMERNAME"].ToString();
				this.txtSubClientID.Text = dr["CUSTOMERID"].ToString();
				this.txtSubCountryCode.Text = dr["COUNTRYCODE"].ToString();
			}
		}
		
		private DialogResult PopupCustomer()
		{
			try
			{
				popCustomer = new PopupCustomer();

				if (_presenter.WorkItem.SmartParts.Contains("PopupCustomer"))
				{
					_presenter.WorkItem.SmartParts.Remove(_presenter.WorkItem.SmartParts.Get<PopupCustomer>("PopupCustomer"));
				}

				SplashForm.HideSplash();

				popCustomer = _presenter.WorkItem.SmartParts.AddNew<PopupCustomer>("PopupCustomer");
				popCustomer._strCustomerName = Convert.ToString(this.txtSubClientName.Text);
				popCustomer.Title = NLSService.GetNLSLabelInfo("CUSTOMERSEARCH");
				_presenter.WorkItem.Workspaces[CommonUtil.Constants.WorkspaceNames.PopupWorkspace].Show(popCustomer);
			}
			catch (Exception ex)
			{
				MesMessageBox.ShowDialog(ex.Message, ex.ToString(), CODESUBTYPE.ERROR, false, null);
			}

			return popCustomer.DialogResult;
		}

		private void TxtSubProductDefinitionID_PreviewKeyDown(object sender, PreviewKeyDownEventArgs e)
		{
			if (e.KeyCode == Keys.Back || e.KeyCode == Keys.Delete)
			{
				this.txtSubProductDefinitionID.Clear();
				this.txtSubProductDefinitionNM.Clear();
			}
		}

		private void TxtSubProductDefinitionID_DoubleClick(object sender, EventArgs e)
		{
			try
			{
				DialogResult dialogResult = PopupMapping();

				if (dialogResult == DialogResult.OK)
				{
					DataRow dr = popProduct._dr;
					this.cboSubTexture.EditValue = dr["TEXTURE"].ToString();
					this.txtSubProductDefinitionID.Text = dr["PRODUCTDEFINITIONID"].ToString();
					this.txtSubProductDefinitionNM.Text = dr["PRODUCTDEFINITIONNAME"].ToString();
				}
			}
			catch (Exception ex)
			{
				MesMessageBox.ShowDialog(ex.Message, ex.ToString(), CODESUBTYPE.ERROR, false, null);
			}
		}

		private void TxtProductCode_PreviewKeyDown(object sender, PreviewKeyDownEventArgs e)
		{
			if (e.KeyCode == Keys.Back || e.KeyCode == Keys.Delete)
			{
				this.txtProductCode.Clear();
				this.txtProductName.Clear();
			}
		}

		private void TxtProductCode_DoubleClick(object sender, EventArgs e)
		{
			try
			{
				DialogResult dialogResult = PopupMapping();

				if (dialogResult == DialogResult.OK)
				{
					DataRow dr = popProduct._dr;
					this.cboTexture.EditValue = dr["TEXTURE"].ToString();
					this.txtProductCode.Text = dr["PRODUCTDEFINITIONNAME"].ToString();
					this.txtProductName.Text = dr["PRODUCTDEFINITIONID"].ToString();
				}
			}
			catch (Exception ex)
			{
				MesMessageBox.ShowDialog(ex.Message, ex.ToString(), CODESUBTYPE.ERROR, false, null);
			}
		}

		private DialogResult PopupMapping()
		{
			try
			{
				popProduct = new PopupProduct();

				if (_presenter.WorkItem.SmartParts.Contains("PopupProduct"))
				{
					_presenter.WorkItem.SmartParts.Remove(_presenter.WorkItem.SmartParts.Get<PopupProduct>("PopupProduct"));
				}

				SplashForm.HideSplash();

				popProduct = _presenter.WorkItem.SmartParts.AddNew<PopupProduct>("PopupProduct");
				popProduct._strMatKind = Convert.ToString(this.cboSubTexture.EditValue);
				popProduct._strProductId = this.cboTexture.EditValue.ToString();
				popProduct.Title = NLSService.GetNLSLabelInfo("PRODUCTDEFINITIONIDSEARCH");
				_presenter.WorkItem.Workspaces[CommonUtil.Constants.WorkspaceNames.PopupWorkspace].Show(popProduct);
			}
			catch (Exception ex)
			{
				MesMessageBox.ShowDialog(ex.Message, ex.ToString(), CODESUBTYPE.ERROR, false, null);
			}

			return popProduct.DialogResult;
		}

		private void GridView_DoubleClick(object sender, EventArgs e)
		{
			//Row나 Cell 에 대한 Double Click 이 아닐 경우 return;
			DXMouseEventArgs ea = e as DXMouseEventArgs;
			GridView view = sender as GridView;
			GridHitInfo info = view.CalcHitInfo(ea.Location);
			if (!info.InRow || !info.InRowCell) return;

			this.SubDataSearch();
		}
		private void SubDataSearch()
		{
			try
			{
				DataRow dr = grdList.gridView.GetFocusedDataRow();

				if (dr != null)
				{
					this.txtSubReciveNo.Text = dr["RECIVENO"].ToString();
					this.dtpSubReciveDate.EditValue = dr["RECIVEDATE"];
					this.txtSubReciverID.Text = dr["RECIVEPERSONID"].ToString();
					this.txtSubReciverName.Text = dr["RECIVEPERSONNAME"].ToString();
					this.cboSubComplaintType.EditValue = dr["COMPLAINTTYPE"].ToString(); //불량유형
					this.txtSubClientID.Text = dr["CLIENTID"].ToString();    //고객사ID
					this.txtSubClientName.Text = dr["CLIENTNAME"].ToString();    //고객사명
					this.txtSubCountryCode.Text = dr["COUNTRYCODE"].ToString();
					this.txtSubEndCustomer.Text = dr["ENDCUSTOMER"].ToString();    //최종 고객사
					this.txtSubLine.Text = dr["LINE"].ToString();    //고객사 라인
					this.txtSubProcessName.Text = dr["PROCESSNAME"].ToString();    //고객사 공정

					this.txtSubCustEqpName.Text = dr["CUSTOMEREQUIPMENTNAME"].ToString();    //고객사 장비명
					this.txtSubUseTemp.Text = dr["USETEMP"].ToString();    //사용 온도
					this.txtSubUsePressure.Text = dr["USEPRESSURE"].ToString();    //사용 압력			
					this.txtSubGas.Text = dr["GAS"].ToString();    //가스
					this.txtSubComplaint.Text = dr["COMPLAINT"].ToString();    //불만내용

					this.cboSubPlantDivisionID.EditValue = dr["PLANTDIVISIONID"].ToString();    //공장구분
					this.cboSubTexture.EditValue = dr["TEXTURE"].ToString();    //재질
					this.txtSubProductDefinitionID.Text = dr["PRODUCTDEFINITIONID"].ToString();    //제품코드
					this.txtSubProductDefinitionNM.Text = dr["PRODUCTDEFINITIONNAME"].ToString();    //제품명
					this.dtpSubShipmentDate.EditValue = dr["SHIPMENTDATE"];    //출하일자
					this.txtSubBadCount.Text = dr["BADCOUNT"].ToString();    //불량
					this.txtSubReciveCount.Text = dr["RECIVECOUNT"].ToString();    //반입수량

					this.dtpSubComReciveDate.EditValue = dr["COMRECIVEDATE"]; //전산반입일자
					this.txtSubComReciveCount.Text = dr["COMRECIVECOUNT"].ToString(); //전산반입수량
					this.dtpSubChangShippingDate.EditValue = dr["CHANGSHIPPINGDATE"]; //대체품출하일자
					this.txtSubChangShippingCount.Text = dr["CHANGSHIPPINCOUNT"].ToString(); //대체품출하수량
					this.txtSubRemark.Text = dr["REMARK"].ToString(); //비고

					this.dtpSubQmProductDate.EditValue = dr["QMPRODUCTDATE"]; //생산일자
					this.cboSubIssuType.EditValue = dr["ISSUTYPE"].ToString(); //발생현상
					this.cboSubIssuCause.EditValue = dr["ISSUCAUSE"].ToString(); //발생원인
					this.txtSubCauseDivisionComment.Text = dr["CAUSEDIVISIONCOMMENT"].ToString(); //원인분석

					this.cboSubImpute.EditValue = dr["IMPUTE"].ToString(); //귀책
					this.dtpSubActionDate.EditValue = dr["ACTIONDATE"]; //조치완료일
					this.cboSubDivisionType.EditValue = dr["DIVISIONTYPE"].ToString(); //유형구분
					this.txtSubActionComment.Text = dr["ACTIONCOMMENT"].ToString(); //조치사항

					this.cboSubPrograssState.EditValue = dr["PROGRASSSTATE"].ToString(); //진행단계
					this.txtSubLastReplayingPerson.Text = dr["LASTREPLAYINGPERSON"].ToString(); //최종 회신담당자
                    string tempStrSubOne = string.Empty;
                    tempStrSubOne = dr["ONEREPLYINGDATE"].ToString(); //1차 회신일자
                    this.dtpSubOneReplyingDate.EditValue = tempStrSubOne;

                    this.dtpSubLastReplyingDate.EditValue = dr["LASTREPLYINGDATE"].ToString(); //최종 회신일자

					if (!string.IsNullOrEmpty(dr["RECIVEDATE"].ToString()) && !string.IsNullOrEmpty(dr["APPROVEDATE"].ToString())) //승인
					{
						this.txtSubApprovalCount.Text = this.Required(dr["RECIVEDATE"].ToString(), dr["APPROVEDATE"].ToString()).ToString();
					}

					if (!string.IsNullOrEmpty(dr["RECIVEDATE"].ToString()) && !string.IsNullOrEmpty(dr["COMPLATEDATE"].ToString())) //완료
					{
						this.txtSubComplateCount.Text = this.Required(dr["RECIVEDATE"].ToString(), dr["COMPLATEDATE"].ToString()).ToString();
					}

					this.txtCheckID.Text = dr["CHECKERID"].ToString();
					this.txtCheckNM.Text = dr["CHECKERNAME"].ToString();
					this.txtCheckDate.Text = dr["CHECKEDATE"].ToString();
					this.txtAnalysID.Text = dr["ANALYSTID"].ToString();
					this.txtAnalysNM.Text = dr["ANALYSTNAME"].ToString();
					this.txtAnalysDate.Text = dr["ANALYSISDATE"].ToString();
					this.txtReportID.Text = dr["REPORTERID"].ToString();
					this.txtReportNM.Text = dr["REPORTERNAME"].ToString();
					this.txtReportDate.Text = dr["REPORTDATE"].ToString();
					this.txtApproverID.Text = dr["APPROVERID"].ToString();
					this.txtApproverNM.Text = dr["APPROVERNAME"].ToString();
					this.txtApproverDate.Text = dr["APPROVEDATE"].ToString();
					//영업이고 단계가 승인이면 완료 버튼을 visable = true;
					if(dr["PROGRASSSTATE"].ToString() == "5" && UIConstants.departmentCode.StartsWith("4B"))
					{
						this.btnComplate.Visible = true;
					}
					else
					{
						this.btnComplate.Visible = false;
					}
                    AttachDataLoad1(this.txtSubReciveNo.Text);
                    AttachDataLoad2(this.txtSubReciveNo.Text);
                    
					//메일 가져오기
                    GridMail_Search(this.txtSubReciveNo.Text);
                }
			}
			catch (Exception ex)
			{
				MesMessageBox.ShowDialog(ex.Message, CODESUBTYPE.ERROR, null);
			}
		}

		private int Required(string strReciveDate, string strTargetDate)
		{
			int intBetweenDayCnt = 0;
			int i = 0;
			DateTime dtRecive = Convert.ToDateTime(strReciveDate);
			DateTime dtTarget = Convert.ToDateTime(strTargetDate);
			
			while (true)
			{
				dtRecive = dtRecive.AddDays(i);

				if (dtRecive.DayOfWeek != DayOfWeek.Saturday && dtRecive.DayOfWeek != DayOfWeek.Sunday)
				{
					intBetweenDayCnt++;
				}

				TimeSpan tsBetween = dtTarget - dtRecive;
				if (tsBetween.Days <= 0)
				{
					break;
				}
				i++;
			}
			return intBetweenDayCnt;
		}

		private void GridMail_Search(string strReciveNo)
		{
			try
			{
				grdMail.DataBindings.Clear();
				grdMail.gridControl.DataSource = null;

				MessageData mesRequestData = new MessageData();
				Hashtable hash = new Hashtable();
				hash["_REQUESTTYPE"] = "MAILINQUERY";
				hash["_VERSION"] = "001";
				hash["_CLASSID"] = "MES_UI_QM";
				hash["RECIVENO"] = strReciveNo;                                            //제품정보

				mesRequestData.COMMAND = @"RuleCustomerDiscontent";
				mesRequestData.QUERYID = "GET_QM210_CustomerDiscontentMail";
				mesRequestData.SITEID = UIConstants.SiteId;
				mesRequestData.HASHTABLE = hash;
				mesRequestData.COMMANDTYPE = @"StoredQuery";

				MessageData replyData = _MessageService.SendRequestOIMessageData(mesRequestData);

				if (replyData.ISSUCCESS)
				{
					if (replyData.DATATABLE == null || replyData.DATATABLE.Rows.Count == 0)
					{
						MesSmallMessageBox.ShowDialog(MesNLSCode.MSG00003, CODETYPE.MESSAGE, true, null);
					}
					else
					{
						this.grdMail.BindNLS(replyData.DATATABLE);
					}
				}
				else
				{
					MesSmallMessageBox.ShowDialog(replyData.MESSAGE, CODESUBTYPE.MESSAGE, true, null);
				}
			}
			catch (Exception ex)
			{
				MesMessageBox.ShowDialog(ex.Message, CODESUBTYPE.ERROR, null);
			}
		}
		
		private void BtnComplate_Click(object sender, EventArgs e)
		{
			this.SubData_Save("6");
		}
		
		private void BtnDelete_Click(object sender, EventArgs e)
		{
			if (grdList.gridView.RowCount > 0)
			{
				MesOKCancelTextMessageBox result = new MesOKCancelTextMessageBox("삭제여부", "삭제하시겠습니까? 삭제를 원하시면 '삭제'를 입력하세요", "삭제");
				result.ShowDialog();
				if (result.DialogResult != DialogResult.OK)
					return;

				for (int i = 0; i < grdList.gridView.RowCount; i++)
				{
					if (grdList.gridView.GetRowCellValue(i, "CHK").Equals(1))
					{
						this.DeleteUpdate(grdList.gridView.GetRowCellValue(i, "RECIVENO").ToString());
					}
				}
			}
		}

		private void DeleteUpdate(string strReciveNo)
		{
			try
			{
                if (string.IsNullOrWhiteSpace(this.dtpSubReciveDate.EditValue.ToString()))
                {
                    //메시지 : 결재자를 확인해 주세요
                    MesSmallMessageBox.ShowDialog("접수일자 가 없습니다.", CODESUBTYPE.MESSAGE, true, null);
                    return;
                }
                if (string.IsNullOrWhiteSpace(this.txtSubReciverName.Text))
                {
                    //메시지 : 결재자를 확인해 주세요
                    MesSmallMessageBox.ShowDialog("접수자 가 없습니다.", CODESUBTYPE.MESSAGE, true, null);
                    return;
                }
                //if (string.IsNullOrWhiteSpace(this.cboSubComplaintType.SelectedText))
                //{
                //    //메시지 : 결재자를 확인해 주세요
                //    MesSmallMessageBox.ShowDialog("불만유형이 없습니다.", CODESUBTYPE.MESSAGE, true, null);
                //    return;
                //}
                //if (string.IsNullOrWhiteSpace(this.txtSubClientName.Text))
                //{
                //    //메시지 : 결재자를 확인해 주세요
                //    MesSmallMessageBox.ShowDialog("고객명이 없습니다.", CODESUBTYPE.MESSAGE, true, null);
                //    return;
                //}
                //if (string.IsNullOrWhiteSpace(this.txtSubComplaint.Text))
                //{
                //    //메시지 : 결재자를 확인해 주세요
                //    MesSmallMessageBox.ShowDialog("불만내용이 없습니다.", CODESUBTYPE.MESSAGE, true, null);
                //    return;
                //}
                //if (string.IsNullOrWhiteSpace(this.cboSubPlantDivisionID.SelectedText))
                //{
                //    //메시지 : 결재자를 확인해 주세요
                //    MesSmallMessageBox.ShowDialog("공장 분류 를 선택하지 않았습니다.", CODESUBTYPE.MESSAGE, true, null);
                //    return;
                //}
                //if (string.IsNullOrWhiteSpace(this.txtSubProductDefinitionID.Text))
                //{
                //    //메시지 : 결재자를 확인해 주세요
                //    MesSmallMessageBox.ShowDialog("제품코드가 없습니다.", CODESUBTYPE.MESSAGE, true, null);
                //    return;
                //}

                MesOKCancelMessageBox result = new MesOKCancelMessageBox("DELETE", MesNLSCode.QUE0003);//저장 메시지
				if (result.ShowDialog() == System.Windows.Forms.DialogResult.OK)
				{
					SplashForm.ShowSplash();
					Hashtable hash = new Hashtable();
					hash["SITEID"] = UIConstants.SiteId;
					hash["_REQUESTTYPE"] = "DELETE";
					hash["_VERSION"] = "001";
					hash["_CLASSID"] = "MES_UI_QM";//클래스 아이디

					hash["RECIVENO"] = strReciveNo;

					MessageData returnData = _presenter.SetCustomerDiscontentData(_MessageService, hash);
					SplashForm.HideSplash();
					if (returnData.ISSUCCESS == false)
					{
						MesMessageBox.ShowDialog(returnData.MESSAGE, CODESUBTYPE.MESSAGE, true, null);
					}
					else
					{
						MesSmallMessageBox.ShowDialog(MesNLSCode.MSG00295, CODESUBTYPE.MESSAGE, true, null);        //삭제에 성공했습니다.
						this.GridData_Search();                                                                     //새로고침
						this.SubData_Clear();
					}
				}
			}
			catch (Exception ex)
			{
				SplashForm.HideSplash();
				MesMessageBox.ShowDialog(ex.Message, CODESUBTYPE.ERROR, null);
			}
		}
		
		private void BtnNew_Click(object sender, EventArgs e)
		{
			this.SubData_Clear();
		}

		private void SubData_Clear()
		{
			this.txtSubReciveNo.Text = "";
			this.dtpSubReciveDate.EditValue = DateTime.Now.ToString("yyyy-MM-dd");
			this.txtSubReciverID.Text = UIConstants.UserID;
			this.txtSubReciverName.Text = UIConstants.UserName;
			this.cboSubComplaintType.EditValue = null; //불량유형
			this.txtSubClientID.Text = "";    //고객사ID
			this.txtSubClientName.Text = "";    //고객사명
			this.txtSubCountryCode.Text = "";
			this.txtSubEndCustomer.Text = "";    //최종 고객사
			this.txtSubLine.Text = "";    //고객사 라인
			this.txtSubProcessName.Text = "";    //고객사 공정

			this.txtSubCustEqpName.Text = "";    //고객사 장비명
			this.txtSubUseTemp.Text = "";    //사용 온도
			this.txtSubUsePressure.Text = "";    //사용 압력			
			this.txtSubGas.Text = "";    //가스
			this.txtSubComplaint.Text = "";    //불만내용

			this.cboSubPlantDivisionID.EditValue = null;    //공장구분
			this.cboSubTexture.EditValue = null;    //재질
			this.txtSubProductDefinitionID.Text = "";    //제품코드
			this.txtSubProductDefinitionNM.Text = "";    //제품명
			this.dtpSubShipmentDate.EditValue = null;    //출하일자
			this.txtSubBadCount.Text = "";    //불량
			this.txtSubReciveCount.Text = "";    //반입수량

			this.dtpSubComReciveDate.EditValue = null; //전산반입일자
			this.txtSubComReciveCount.Text = ""; //전산반입수량
			this.dtpSubChangShippingDate.EditValue = null; //대체품출하일자
			this.txtSubChangShippingCount.Text = ""; //대체품출하수량
			this.txtSubRemark.Text = ""; //비고

			this.dtpSubQmProductDate.EditValue = null; //생산일자
			this.cboSubIssuType.EditValue = null; //발생현상
			this.cboSubIssuCause.EditValue = null; //발생원인
			this.txtSubCauseDivisionComment.Text = ""; //원인분석

			this.cboSubImpute.EditValue = null; //귀책
			this.dtpSubActionDate.EditValue = null; //조치완료일
			this.cboSubDivisionType.EditValue = null; //유형구분
			this.txtSubActionComment.Text = ""; //조치사항

			this.cboSubPrograssState.EditValue = "1"; //진행단계
			this.dtpSubOneReplyingDate.EditValue = null; //1차 회신일자
			this.dtpSubLastReplyingDate.EditValue = null; //최종 회신일자
			this.txtSubLastReplayingPerson.Text = ""; //최종 회신담당자
			this.txtSubApprovalCount.Text = ""; //승인 소요일
			this.txtSubComplateCount.Text = ""; //완료 소요일

			this.txtCheckID.Text = "";
			this.txtCheckNM.Text = "";
			this.txtCheckDate.Text = "";
			this.txtAnalysID.Text = "";
			this.txtAnalysNM.Text = "";
			this.txtAnalysDate.Text = "";
			this.txtReportID.Text = "";
			this.txtReportNM.Text = "";
			this.txtReportDate.Text = "";
			this.txtApproverID.Text = "";
			this.txtApproverNM.Text = "";
			this.txtApproverDate.Text = "";
		}

		private void BtnSave_Click(object sender, EventArgs e)
		{
			if(this.cboSubPrograssState.EditValue.ToString() != "6")
			{
				this.SubData_Save(this.cboSubPrograssState.EditValue.ToString());
			}
		}

		private void SubData_Save(string strState)
		{
			//Insert인지 Update인지 구분
			string strReciveNo = this.txtSubReciveNo.Text;
			try
			{
				if (dtpSubReciveDate.Text.IsNullOrWhiteSpace() ||
					txtSubReciverName.Text.IsNullOrWhiteSpace() ||
					cboSubComplaintType.Text.IsNullOrWhiteSpace() ||
					txtSubClientName.Text.IsNullOrWhiteSpace() ||
					txtSubComplaint.Text.IsNullOrWhiteSpace() ||
					cboSubPlantDivisionID.Text.IsNullOrWhiteSpace() ||
					txtSubProductDefinitionID.Text.IsNullOrWhiteSpace())
				{
					MesSmallMessageBox.ShowDialog("필수입력값이 입력되지 않았습니다.", "", null);
					return;
				}

				MesOKCancelMessageBox result = new MesOKCancelMessageBox("SAVE", MesNLSCode.QUE0002);//저장 메시지
				if (result.ShowDialog() == System.Windows.Forms.DialogResult.OK)
				{
					SplashForm.ShowSplash();

					Hashtable hash = new Hashtable();

					hash["SITEID"] = UIConstants.SiteId;
					hash["_VERSION"] = "001";
					hash["_CLASSID"] = "MES_UI_QM";//클래스 아이디
					hash["_REQUESTTYPE"] = "INSERT";

					hash["RECIVENO"] = strReciveNo;
					hash["RECIVEDATE"] = string.IsNullOrWhiteSpace(this.dtpSubReciveDate.EditValue.ToString()) ? null : this.dtpSubReciveDate.EditValue;
					hash["RECIVEPERSONID"] = this.txtSubReciverID.Text;
					hash["RECIVEPERSONNAME"] = this.txtSubReciverName.Text;
					hash["COMPLAINTTYPE"] = this.cboSubComplaintType.EditValue; //불량유형
					hash["CLIENTID"] = this.txtSubClientID.Text;    //고객사ID
					hash["CLIENTNAME"] = this.txtSubClientName.Text;    //고객사명
					hash["COUNTRYCODE"] = this.txtSubCountryCode.Text;    //고객사명
					hash["ENDCUSTOMER"] = this.txtSubEndCustomer.Text;    //최종 고객사
					hash["LINE"] = this.txtSubLine.Text;    //고객사 라인
					hash["PROCESSNAME"] = this.txtSubProcessName.Text;    //고객사 공정

					hash["CUSTOMEREQUIPMENTNAME"] = this.txtSubCustEqpName.Text;    //고객사 장비명
					hash["USETEMP"] = string.IsNullOrWhiteSpace(this.txtSubUseTemp.Text) ? 0 : this.txtSubUseTemp.EditValue.To<int>();    //사용 온도
					hash["USEPRESSURE"] = string.IsNullOrWhiteSpace(this.txtSubUsePressure.Text) ? 0 : this.txtSubUsePressure.EditValue.To<int>();    //사용 압력			
					hash["GAS"] = this.txtSubGas.Text;    //가스
					hash["COMPLAINT"] = this.txtSubComplaint.Text;    //불만내용

					hash["PLANTDIVISIONID"] = this.cboSubPlantDivisionID.EditValue;    //공장구분
					hash["TEXTURE"] = this.cboSubTexture.EditValue;    //재질
					hash["PRODUCTDEFINITIONID"] = this.txtSubProductDefinitionID.Text;    //제품코드
					hash["PRODUCTDEFINITIONNAME"] = this.txtSubProductDefinitionNM.Text;    //제품명
					hash["SHIPMENTDATE"] = string.IsNullOrWhiteSpace(this.dtpSubShipmentDate.EditValue.To<string>()) ? null : this.dtpSubShipmentDate.EditValue;    //제품명
					hash["BADCOUNT"] = string.IsNullOrWhiteSpace(this.txtSubBadCount.Text) ? 0 : this.txtSubBadCount.EditValue.To<int>();    //불량
					hash["RECIVECOUNT"] = string.IsNullOrWhiteSpace(this.txtSubReciveCount.Text) ? 0 : this.txtSubReciveCount.EditValue.To<int>();    //반입수량

					hash["COMRECIVEDATE"] = string.IsNullOrWhiteSpace(this.dtpSubComReciveDate.EditValue.To<string>()) ? null : this.dtpSubComReciveDate.EditValue; //전산반입일자
					hash["COMRECIVECOUNT"] = string.IsNullOrWhiteSpace(this.txtSubComReciveCount.Text) ? 0 : this.txtSubComReciveCount.EditValue.To<int>(); //전산반입수량
					hash["CHANGSHIPPINGDATE"] = string.IsNullOrWhiteSpace(this.dtpSubChangShippingDate.EditValue.To<string>()) ? null : this.dtpSubChangShippingDate.EditValue; //대체품출하일자
					hash["CHANGSHIPPINCOUNT"] = string.IsNullOrWhiteSpace(this.txtSubChangShippingCount.Text) ? 0 : this.txtSubChangShippingCount.EditValue.To<int>(); //대체품출하수량
					hash["REMARK"] = this.txtSubRemark.Text; //비고

					hash["QMPRODUCTDATE"] = string.IsNullOrWhiteSpace(this.dtpSubQmProductDate.EditValue.To<string>()) ? null : this.dtpSubQmProductDate.EditValue; //생산일자
					hash["ISSUTYPE"] = this.cboSubIssuType.EditValue; //발생현상
					hash["ISSUCAUSE"] = this.cboSubIssuCause.EditValue; //발생원인
					hash["CAUSEDIVISIONCOMMENT"] = this.txtSubCauseDivisionComment.Text; //원인분석

					hash["IMPUTE"] = this.cboSubImpute.EditValue; //귀책
					hash["ACTIONDATE"] = string.IsNullOrWhiteSpace(this.dtpSubActionDate.EditValue.To<string>()) ? null : this.dtpSubActionDate.EditValue; //조치완료일
					hash["DIVISIONTYPE"] = this.cboSubDivisionType.EditValue; //유형구분
					hash["ACTIONCOMMENT"] = this.txtSubActionComment.Text; //조치사항

					hash["PROGRASSSTATE"] = strState; //진행단계
					hash["ONEREPLYINGDATE"] = string.IsNullOrWhiteSpace(this.dtpSubOneReplyingDate.EditValue.To<string>()) ? null : this.dtpSubOneReplyingDate.EditValue; //1차 회신일자
					hash["LASTREPLYINGDATE"] = string.IsNullOrWhiteSpace(this.dtpSubLastReplyingDate.EditValue.To<string>()) ? null : this.dtpSubLastReplyingDate.EditValue; //최종 회신일자
					hash["LASTREPLAYINGPERSON"] = this.txtSubLastReplayingPerson.Text; //최종 회신담당자
					//hash["APPROVALCOUNT"] = this.txtSubApprovalCount.Text; //승인 소요일
					//hash["COMPLETECOUNT"] = this.txtSubComplateCount.Text; //완료 소요일

					switch (strState)
					{
						case "2":
							hash["CHECKERID"] = UIConstants.UserID;
							hash["CHECKERNAME"] = UIConstants.UserName;
							hash["CHECKEDATE"] = DateTime.Now.ToString("yyyy-MM-dd");

							hash["ANALYSTID"] = null;
							hash["ANALYSTNAME"] = null;
							hash["ANALYSISDATE"] = null;
							hash["REPORTERID"] = null;
							hash["REPORTERNAME"] = null;
							hash["REPORTDATE"] = null;
							hash["APPROVERID"] = null;
							hash["APPROVERNAME"] = null;
							hash["APPROVEDATE"] = null;
							hash["COMPLATERID"] = null;
							hash["COMPLATERNAME"] = null;
							hash["COMPLATEDATE"] = null;
							break;
						case "3":
							hash["CHECKERID"] = txtCheckID.Text;
							hash["CHECKERNAME"] = txtCheckNM.Text;
							hash["CHECKEDATE"] = txtCheckDate.Text;
							hash["ANALYSTID"] = UIConstants.UserID;
							hash["ANALYSTNAME"] = UIConstants.UserName;
							hash["ANALYSISDATE"] = DateTime.Now.ToString("yyyy-MM-dd");
							
							hash["REPORTERID"] = null;
							hash["REPORTERNAME"] = null;
							hash["REPORTDATE"] = null;
							hash["APPROVERID"] = null;
							hash["APPROVERNAME"] = null;
							hash["APPROVEDATE"] = null;
							hash["COMPLATERID"] = null;
							hash["COMPLATERNAME"] = null;
							hash["COMPLATEDATE"] = null;
							break;
						case "4":
							hash["CHECKERID"] = txtCheckID.Text;
							hash["CHECKERNAME"] = txtCheckNM.Text;
							hash["CHECKEDATE"] = txtCheckDate.Text;
							hash["ANALYSTID"] = txtAnalysID.Text;
							hash["ANALYSTNAME"] = txtAnalysNM.Text;
							hash["ANALYSISDATE"] = txtAnalysDate.Text;
							hash["REPORTERID"] = UIConstants.UserID;
							hash["REPORTERNAME"] = UIConstants.UserName;
							hash["REPORTDATE"] = DateTime.Now.ToString("yyyy-MM-dd");

							hash["APPROVERID"] = null;
							hash["APPROVERNAME"] = null;
							hash["APPROVEDATE"] = null;
							hash["COMPLATERID"] = null;
							hash["COMPLATERNAME"] = null;
							hash["COMPLATEDATE"] = null;
							break;
						case "5":
							hash["CHECKERID"] = txtCheckID.Text;
							hash["CHECKERNAME"] = txtCheckNM.Text;
							hash["CHECKEDATE"] = txtCheckDate.Text;
							hash["ANALYSTID"] = txtAnalysID.Text;
							hash["ANALYSTNAME"] = txtAnalysNM.Text;
							hash["ANALYSISDATE"] = txtAnalysDate.Text;
							hash["REPORTERID"] = txtReportID.Text;
							hash["REPORTERNAME"] = txtReportNM.Text;
							hash["REPORTDATE"] = txtReportDate.Text;
							hash["APPROVERID"] = UIConstants.UserID;
							hash["APPROVERNAME"] = UIConstants.UserName;
							hash["APPROVEDATE"] = DateTime.Now.ToString("yyyy-MM-dd");
							hash["COMPLATERID"] = null;
							hash["COMPLATERNAME"] = null;
							hash["COMPLATEDATE"] = null;
							break;
						case "6":
							hash["CHECKERID"] = txtCheckID.Text;
							hash["CHECKERNAME"] = txtCheckNM.Text;
							hash["CHECKEDATE"] = txtCheckDate.Text;
							hash["ANALYSTID"] = txtAnalysID.Text;
							hash["ANALYSTNAME"] = txtAnalysNM.Text;
							hash["ANALYSISDATE"] = txtAnalysDate.Text;
							hash["REPORTERID"] = txtReportID.Text;
							hash["REPORTERNAME"] = txtReportNM.Text;
							hash["REPORTDATE"] = txtReportDate.Text;
							hash["APPROVERID"] = txtApproverID.Text;
							hash["APPROVERNAME"] = txtApproverNM.Text;
							hash["APPROVEDATE"] = txtApproverDate.Text;
							hash["COMPLATERID"] = UIConstants.UserID;
							hash["COMPLATERNAME"] = UIConstants.UserName;
							hash["COMPLATEDATE"] = DateTime.Now.ToString("yyyy-MM-dd");
							TimeSpan TS = DateTime.Now - DateTime.Parse(hash["RECIVEDATE"].ToString());
							hash["COMPLATECOUNT"] = TS.Days.ToString();
							break;
						default:
							hash["CHECKERID"] = null;
							hash["CHECKERNAME"] = null;
							hash["CHECKEDATE"] = null;
							hash["ANALYSTID"] = null;
							hash["ANALYSTNAME"] = null;
							hash["ANALYSISDATE"] = null;
							hash["REPORTERID"] = null;
							hash["REPORTERNAME"] = null;
							hash["REPORTDATE"] = null;
							hash["APPROVERID"] = null;
							hash["APPROVERNAME"] = null;
							hash["APPROVEDATE"] = null;
							hash["COMPLATERID"] = null;
							hash["COMPLATERNAME"] = null;
							hash["COMPLATEDATE"] = null;
							break;
					}

					MessageData returnData = _presenter.SetCustomerDiscontentData(_MessageService, hash);

					if (returnData.ISSUCCESS == false)
					{
						SplashForm.HideSplash();
						MesMessageBox.ShowDialog(returnData.EXCEPTIONMESSAGE, CODESUBTYPE.MESSAGE, true, null);
					}
					else
					{
						this.txtSubReciveNo.Text = returnData.CODE;
						//상신
						if (strState == "4")
						{
							this.Settle();
						}

						//메일 정보 입력
						if (grdMail.gridView.RowCount > 0)
						{
							if (strState == "1")
							{
								MesOKCancelMessageBox mailResult = new MesOKCancelMessageBox("SAVE", MesNLSCode.QUE0004, new List<string>() { "메일 보내기를" });//저장 메시지
								if (mailResult.ShowDialog() == System.Windows.Forms.DialogResult.OK)
								{
									if (this.MailSave() == false)
									{
										//메시지 : 메일 저장 실패
										SplashForm.HideSplash();
										MesSmallMessageBox.ShowDialog(MesNLSCode.QMS0023, CODESUBTYPE.MESSAGE, true, null); //메일 저장에 실패 하였습니다.
									}
									else
									{
										this.MailSend();
										SplashForm.HideSplash();
										MesSmallMessageBox.ShowDialog(MesNLSCode.INF0004, CODESUBTYPE.MESSAGE, true, null); //저장 되었습니다.
										this.GridData_Search();                                                                  //새로고침
									}
								}
							}
							else
							{
								SplashForm.HideSplash();
								MesSmallMessageBox.ShowDialog(MesNLSCode.INF0004, CODESUBTYPE.MESSAGE, true, null); //저장 되었습니다.
								this.GridData_Search();
							}
						}
						else
						{
							SplashForm.HideSplash();
							MesSmallMessageBox.ShowDialog(MesNLSCode.INF0004, CODESUBTYPE.MESSAGE, true, null); //저장 되었습니다.
							this.GridData_Search();
						}

					}

				}
			}
			catch (Exception ex)
			{
				SplashForm.HideSplash();
				MesMessageBox.ShowDialog(ex.Message, CODESUBTYPE.ERROR, null);
			}
		}

		private void Settle()
		{
			Hashtable hash = new Hashtable();
			hash["SITEID"] = UIConstants.SiteId;
			hash["_VERSION"] = "001";
			hash["_CLASSID"] = "MES_UI_QM";//클래스 아이디
			hash["_REQUESTTYPE"] = "INSERTGW";
			hash["QUERYID"] = "Set_QM210_SettleSave";

			hash["WORKTYPE"] = "MS-CC-001";
			hash["RECIVENO"] = this.grdList.gridView.GetFocusedRowCellValue("RECIVENO").To<string>();
			hash["APRCONTENTS"] = this.CreateGWHtml();

			MessageData returnData = _presenter.SetCustomerDiscontentData(_MessageService, hash);
			if (returnData.ISSUCCESS == false)
			{
				//메세지 : 그룹웨어 상신에 실패 하였습니다.
				MesSmallMessageBox.ShowDialog(MesNLSCode.QMS0037, CODESUBTYPE.MESSAGE, true, null);
			}
			else
			{
				if (returnData.DATATABLE == null || string.IsNullOrEmpty(returnData.DATATABLE.Rows[0][0].ToString()))
				{
					//메세지 : 그룹웨어 상신에 실패 하였습니다.
					MesSmallMessageBox.ShowDialog(MesNLSCode.QMS0037, CODESUBTYPE.MESSAGE, true, null);

				}
				else
				{
					string GW_WorkKey = returnData.DATATABLE.Rows[0][0].To<string>();
					this.fncCallEPDoc(GW_WorkKey);
				}
			}
		}

		private string CreateGWHtml()
		{
			string strGWHtml = string.Empty;

			strGWHtml = "";
			strGWHtml += "<html>";
			strGWHtml += "<head>";
			strGWHtml += "<meta http-equiv=\"content - type\" content=\"text / html; charset = ks_c_5601-1987\">";
			strGWHtml += "<title>제목 : 고객불만 </title>";
			strGWHtml += "</head>";
			strGWHtml += "<body bgcolor=\"white\" text=\"black\" link=\"blue\" vlink=\"purple\" alink=\"red\">";
			strGWHtml += "<table border=\"1\" width=\"612\">";
			strGWHtml += "<tr>";
			strGWHtml += "<td width=\"602\" height=\"43\">제목 : 고객불만 </td>";
			strGWHtml += "</tr>";
			strGWHtml += "</table>";
			strGWHtml += "<table border=\"1\" width=\"958\" height=\"956\">";
			strGWHtml += "<tr>";
			strGWHtml += "<td width=\"120\" height=\"65\" style=\"background:#DDD9C3; \">";
			strGWHtml += "<p align=\"center\"><b>고객명</b></p>";
			strGWHtml += "</td>";
			strGWHtml += "<td width=\"185\" height=\"65\">" + this.txtSubClientName.Text + "</td>";
			strGWHtml += "<td width=\"120\" height=\"65\" style=\"background:#DDD9C3; \">";
			strGWHtml += "<p align=\"center\"><b>재질</b></p>";
			strGWHtml += "</td>";
			strGWHtml += "<td width=\"185\" height=\"65\">" + this.cboSubTexture.Text + "</td>";
			strGWHtml += "<td width=\"120\" height=\"65\" style=\"background:#DDD9C3; \">";
			strGWHtml += "<p align=\"center\"><b>고객 공정명</b></p>";
			strGWHtml += "</td>";
			strGWHtml += "<td width=\"185\" height=\"65\">" + this.txtSubProcessName.Text + "</td>";
			strGWHtml += "</tr>";

			strGWHtml += "<tr>";
			strGWHtml += "<td width=\"120\" height=\"65\" style=\"background:#DDD9C3; \">";
			strGWHtml += "<p align=\"center\"><b>접수일자</b></p>";
			strGWHtml += "</td>";
			strGWHtml += "<td width=\"185\" height=\"65\">" + this.dtpSubReciveDate.Text + "</td>";
			strGWHtml += "<td width=\"120\" height=\"65\" style=\"background:#DDD9C3; \">";
			strGWHtml += "<p align=\"center\"><b>출하일</b></p>";
			strGWHtml += "</td>";
			strGWHtml += "<td width=\"185\" height=\"65\">" + this.dtpSubShipmentDate.Text + "</td>";
			strGWHtml += "<td width=\"120\" height=\"65\" style=\"background:#DDD9C3; \">";
			strGWHtml += "<p align=\"center\"><b>고객 장비명</b></p>";
			strGWHtml += "</td>";
			strGWHtml += "<td width=\"185\" height=\"65\">" + this.txtSubCustEqpName.Text + "</td>";
			strGWHtml += "</tr>";

			strGWHtml += "<tr>";
			strGWHtml += "<td width=\"120\" height=\"65\" style=\"background:#DDD9C3; \">";
			strGWHtml += "<p align=\"center\"><b>접수번호</b></p>";
			strGWHtml += "</td>";
			strGWHtml += "<td width=\"185\" height=\"65\">" + this.txtSubReciveNo.Text + "</td>";
			strGWHtml += "<td width=\"120\" height=\"65\" style=\"background:#DDD9C3; \">";
			strGWHtml += "<p align=\"center\"><b>불량 수량</b></p>";
			strGWHtml += "</td>";
			strGWHtml += "<td width=\"185\" height=\"65\">" + this.txtSubBadCount.Text + "</td>";
			strGWHtml += "<td width=\"120\" height=\"65\" style=\"background:#DDD9C3; \">";
			strGWHtml += "<p align=\"center\"><b>사용 온도/압력</b></p>";
			strGWHtml += "</td>";
			strGWHtml += "<td width=\"185\" height=\"65\">" + this.txtSubUseTemp.Text + " / " + this.txtSubUsePressure.Text + "</td>";
			strGWHtml += "</tr>";

			strGWHtml += "<tr>";
			strGWHtml += "<td width=\"120\" height=\"65\" style=\"background:#DDD9C3; \">";
			strGWHtml += "<p align=\"center\"><b>접수자</b></p>";
			strGWHtml += "</td>";
			strGWHtml += "<td width=\"185\" height=\"65\">" + this.txtSubReciverName.Text + "</td>";
			strGWHtml += "<td width=\"120\" height=\"65\" style=\"background:#DDD9C3; \">";
			strGWHtml += "<p align=\"center\"><b>반입 수량</b></p>";
			strGWHtml += "</td>";
			strGWHtml += "<td width=\"185\" height=\"65\">" + this.txtSubReciveCount.Text + "</td>";
			strGWHtml += "<td width=\"120\" height=\"65\" style=\"background:#DDD9C3; \">";
			strGWHtml += "<p align=\"center\"><b>사용 가스</b></p>";
			strGWHtml += "</td>";
			strGWHtml += "<td width=\"185\" height=\"65\">" + this.txtSubGas.Text + "</td>";
			strGWHtml += "</tr>";

			strGWHtml += "<tr>";
			strGWHtml += "<td width=\"120\" height=\"130\" style=\"background:#DDD9C3; \">";
			strGWHtml += "<p align=\"center\"><b>불만 내용</b></p>";
			strGWHtml += "</td>";
			strGWHtml += "<td width=\"795\" height=\"130\" colspan=\"5\">" + this.txtSubComplaint.Text + "</td>";
			strGWHtml += "</tr>";

			strGWHtml += "<tr>";
			strGWHtml += "<td width=\"120\" height=\"65\" style=\"background:#DDD9C3; \">";
			strGWHtml += "<p align=\"center\"><b>제품코드</b></p>";
			strGWHtml += "</td>";
			strGWHtml += "<td width=\"185\" height=\"65\">" + this.txtSubProductDefinitionID.Text + "</td>";
			strGWHtml += "<td width=\"120\" height=\"65\" style=\"background:#DDD9C3; \">";
			strGWHtml += "<p align=\"center\"><b>출하일</b></p>";
			strGWHtml += "</td>";
			strGWHtml += "<td width=\"185\" height=\"65\">" + this.dtpSubShipmentDate.Text + "</td>";
			strGWHtml += "<td width=\"120\" height=\"65\" style=\"background:#DDD9C3; \">";
			strGWHtml += "<p align=\"center\"><b>공장구분</b></p>";
			strGWHtml += "</td>";
			strGWHtml += "<td width=\"185\" height=\"65\">" + this.cboSubPlantDivisionID.Text + "</td>";
			strGWHtml += "</tr>";

			strGWHtml += "<tr>";
			strGWHtml += "<td width=\"120\" height=\"195\" style=\"background:#DDD9C3; \">";
			strGWHtml += "<p align=\"center\"><b>원인분석</b></p>";
			strGWHtml += "</td>";
			strGWHtml += "<td width=\"795\" height=\"130\" colspan=\"5\">" + this.txtSubCauseDivisionComment.Text + "</td>";
			strGWHtml += "</tr>";

			strGWHtml += "<tr>";
			strGWHtml += "<td width=\"120\" height=\"130\" style=\"background:#DDD9C3; \">";
			strGWHtml += "<p align=\"center\"><b>조치사항</b></p>";
			strGWHtml += "<p align=\"center\"><b>(재발방지 대책)</b></p>";
			strGWHtml += "</td>";
			strGWHtml += "<td width=\"490\" height=\"130\" colspan=\"3\">" + this.txtSubActionComment.Text + "</td>";
			strGWHtml += "<td width=\"120\" height=\"130\" style=\"background:#DDD9C3; \">";
			strGWHtml += "<p align=\"center\"><b>조치 완료일</b></p>";
			strGWHtml += "</td>";
			strGWHtml += "<td width=\"185\" height=\"130\">" + this.dtpSubActionDate.Text + "</td>";
			strGWHtml += "</tr>";

			strGWHtml += "<tr>";
			strGWHtml += "<td width=\"120\" height=\"65\" style=\"background:#DDD9C3; \">";
			strGWHtml += "<p align=\"center\"><b>1차 회신일</b></p>";
			strGWHtml += "</td>";
			strGWHtml += "<td width=\"185\" height=\"65\">" + this.dtpSubOneReplyingDate.Text + "</td>";
			strGWHtml += "<td width=\"120\" height=\"65\" style=\"background:#DDD9C3; \">";
			strGWHtml += "<p align=\"center\"><b>최종 회신일</b></p>";
			strGWHtml += "</td>";
			strGWHtml += "<td width=\"185\" height=\"65\">" + this.dtpSubLastReplyingDate.Text + "</td>";
			strGWHtml += "<td width=\"120\" height=\"65\" style=\"background:#DDD9C3; \">";
			strGWHtml += "<p align=\"center\"><b>최종 회신</b></p><p align=\"center\"><b>소요일</b></p>";
			strGWHtml += "</td>";
			strGWHtml += "<td width=\"185\" height=\"65\">" + this.txtSubApprovalCount.Text + "</td>";
			strGWHtml += "</tr>";

			strGWHtml += "<tr>";
			strGWHtml += "<td width=\"120\" height=\"195\" style=\"background:#DDD9C3; \">";
			strGWHtml += "<p align=\"center\"><b>비고</b></p>";
			strGWHtml += "</td>";
			strGWHtml += "<td width=\"795\" height=\"130\" colspan=\"5\">" + this.txtSubRemark.Text + "</td>";
			strGWHtml += "</tr>";

			strGWHtml += "</table>";
			strGWHtml += "</body>";
			strGWHtml += "</html>";

			return strGWHtml;
		}

		private void fncCallEPDoc(string strGwMasterKey)
		{
			//object vPost, vHeaders, vFlags, vTargetFrame;
			//string cPostData;
			string vUrl;

			//vFlags = null;
			//vTargetFrame = null;

			string strEmpNo = UIConstants.UserID;
			string strWorkType = "MS-CC-001";
			string strMasterKey = strGwMasterKey;

			//TEST URL
			vUrl = string.Format("http://hub.skc.kr/dwp/com/workflow/interface/SolmicsIF.nsf/Form_SOL_IF?CreateDocument&fcode={2}&workkey={1}", strEmpNo, strMasterKey, strWorkType);
			//REAL URL
			//vUrl = string.Format("http://hub.skc.kr/dwp/com/workflow/interface/SolmicsIF.nsf/Form_SOL_IF?CreateDocument&fcode={2}&workkey={1}", strEmpNo, strMasterKey, strWorkType);

			HttpWebRequest gomRequest = (HttpWebRequest)WebRequest.Create(vUrl);
            object vPost, vHeaders, vFlags, vTargetFrame;
            vFlags = null;
            vTargetFrame = null;
            vHeaders = "Content-Type: application/x-www-form-urlencoded" + Convert.ToChar(10) + Convert.ToChar(13);
            string cPostData = "";
            vPost = System.Text.ASCIIEncoding.ASCII.GetBytes(cPostData);

            SHDocVw.InternetExplorer ie = new SHDocVw.InternetExplorer();
            SHDocVw.IWebBrowserApp WebBro = (SHDocVw.IWebBrowserApp)ie;

            WebBro.Height = 700;
            WebBro.Width = 1000;
            WebBro.ToolBar = 0;  // Toolbar Disabled
            WebBro.Visible = true;
            WebBro.Navigate(vUrl.ToString(), ref vFlags, ref vTargetFrame, ref vPost, ref vHeaders);

            //using (HttpWebResponse resp = (HttpWebResponse)gomRequest.GetResponse())
            //{
            //    HttpStatusCode status = resp.StatusCode;
            //    Console.WriteLine(status);  // 정상이면 "OK"
            //}
        }

		private bool MailSave()
		{
			//메일 변경유무 체크

			MessageData returnData = new MessageData();
			returnData.ISSUCCESS = false;

			Hashtable hash = new Hashtable();

			hash["SITEID"] = UIConstants.SiteId;
			hash["_VERSION"] = "001";
			hash["_CLASSID"] = "MES_UI_QM";//클래스 아이디
			hash["_REQUESTTYPE"] = "MAILINSERT";

			hash["RECIVENO"] = this.txtSubReciveNo.Text;
			for (int i = 0; i < grdMail.gridView.RowCount; i++)
			{
				hash["SEQ"] = i + 1;
				hash["EMPLOYEEMAIL"] = grdMail.gridView.GetRowCellValue(i, "MAILADDRESS");
				hash["USERID"] = grdMail.gridView.GetRowCellValue(i, "USER");
				returnData = _presenter.SetCustomerDiscontentData(_MessageService, hash);
			}
			return returnData.ISSUCCESS;
		}

		private void MailSend()
		{
			if (grdMail.gridView.RowCount == 0) return;
			StringBuilder sbContents = new StringBuilder();

			sbContents.AppendLine(NLSService.GetNLSLabelInfo("QM210MAILCONTENTS"));
			sbContents.AppendLine("관리번호 : " + txtSubReciveNo.Text);
			sbContents.AppendLine("고객명 : " + txtSubClientName.Text);
			sbContents.AppendLine("최종고객사 : " + txtSubEndCustomer.Text);
			sbContents.AppendLine("라인 : " + txtSubLine.Text);
			sbContents.AppendLine("공정명 : " + txtSubProcessName.Text);
			sbContents.AppendLine("고객장비명 : " + txtSubCustEqpName.Text);
			sbContents.AppendLine("사용온도 : " + txtSubUseTemp.Text);
			sbContents.AppendLine("사용압력 : " + txtSubUsePressure.Text);
			sbContents.AppendLine("사용가스 : " + txtSubGas.Text);
			sbContents.AppendLine("불만내용 : " + txtSubComplaint.Text);
			sbContents.AppendLine("공장분류 : " + cboSubPlantDivisionID.Text);
			sbContents.AppendLine("재질 : " + cboSubTexture.Text);
			sbContents.AppendLine("제품코드 : " + txtSubProductDefinitionID.Text + "[" + txtSubProductDefinitionNM.Text + "]");
			sbContents.AppendLine("출하일 : " + dtpSubShipmentDate.Text);
			sbContents.AppendLine("불량수량 : " + txtSubBadCount.Text);
			sbContents.AppendLine("반입수량 : " + txtSubReciveCount.Text);
			sbContents.AppendLine("비고 : " + txtSubRemark.Text);
			
			for (int i = 0; i < grdMail.gridView.RowCount; i++)
			{
				DataRow dr = grdMail.gridView.GetDataRow(i);
				SMTP mail = new SMTP();
				mail.SendMail(dr["MAILADDRESS"].ToString(), _MenuItem.Name, sbContents.ToString());
			}
		}

		private void BtnSearch_Click(object sender, EventArgs e)
		{
			this.GridData_Search();
		}

		private void GridData_Search()
		{
			string fromTime = string.Empty;
			string toTime = string.Empty;
			string strManage_No = string.Empty;

			fromTime = dtpsOccurrenceDate.GetFromDate().ToShortDateString();
			toTime = dtpsOccurrenceDate.GetToDate().ToShortDateString();

			try
			{
				this.grdList.DataBindings.Clear();
				this.grdList.gridControl.DataSource = null;

				MessageData mesRequestData = new MessageData();
				Hashtable hash = new Hashtable();
				hash["_REQUESTTYPE"] = "INQUERY";
				hash["_VERSION"] = "001";
				hash["_CLASSID"] = "MES_UI_QM";
				hash["FROMTIME"] = fromTime;                                                                //접수일자조회 시작일
				hash["TOTIME"] = toTime;                                                                    //접수일자조회 마지막일
				hash["PROGRASSSTATE"] = Convert.ToString(this.cboProssState.EditValue);                     //진행상태
				hash["RECIVEPERSONID"] = this.txtReceverID.Text;                                            //접수자
				hash["TEXTURE"] = this.cboTexture.EditValue.ToString();                                     //제질
				hash["PRODUCTDEFINITIONID"] = this.txtProductCode.Text;                     //제품코드
				hash["CLIENTID"] = this.txtClientID.Text;

				mesRequestData.COMMAND = @"RuleCustomerDiscontent";
				mesRequestData.QUERYID = "GET_QM210_CustomerDiscontent";
				mesRequestData.SITEID = UIConstants.SiteId;
				mesRequestData.HASHTABLE = hash;
				mesRequestData.COMMANDTYPE = @"StoredQuery";

				MessageData replyData = _MessageService.SendRequestOIMessageData(mesRequestData);

				if (replyData.ISSUCCESS)
				{
					if (replyData.DATATABLE == null || replyData.DATATABLE.Rows.Count == 0)
					{
						MesSmallMessageBox.ShowDialog(MesNLSCode.MSG00003, CODETYPE.MESSAGE, true, null);
					}
					else
					{
						this.grdList.BindNLS(replyData.DATATABLE);
					}
				}
				else
				{
					MesSmallMessageBox.ShowDialog(replyData.MESSAGE, CODESUBTYPE.MESSAGE, true, null);
				}
			}
			catch (Exception ex)
			{
				MesMessageBox.ShowDialog(ex.Message, CODESUBTYPE.ERROR, null);
			}
		}
		
		private void InitializeCombo()
		{
			SetCombo("CUSTPROGRASSSTATE");      //진행상태
			SetCombo("ISSUTYPE");               //발생현상
			SetCombo("IMPUTE");                 //귀책
			SetCombo("ISSUCAUSE");              //발생원인
			SetCombo("DIVISIONTYPE");           //유형구분
			SetCombo("PLANTDIVISIONID");        //공장구분
			SetCombo("TEXTURE");                //재질
			SetCombo("COMPLAINTTYPE");          //불만유형	
		}

		private void SetCombo(string codeClassId)
		{
			try
			{
				MessageData replyData = new MessageData();
				switch (codeClassId)
				{
					case "CUSTPROGRASSSTATE":
						replyData = _presenter.ExecuteQuery("Get_CodeList", "0001", "MES_UI_QM", RequestType.EXECUTEDATATABLE, "SITEID", UIConstants.SiteId, "CODECLASSID", codeClassId);
						this.cboProssState.BindData(replyData.DATATABLE.Copy(), true, false, "CODENAME", "CODEID");
						this.cboProssState.SelectFirstItem();
						this.cboSubPrograssState.BindNLS(replyData.DATATABLE.Copy(), NLSService.GetNLSLabelInfo("CODENAME"), NLSService.GetNLSLabelInfo("CODEID"));
						break;
					case "ISSUTYPE":
						replyData = _presenter.ExecuteQuery("Get_CodeList", "0001", "MES_UI_QM", RequestType.EXECUTEDATATABLE, "SITEID", UIConstants.SiteId, "CODECLASSID", codeClassId);
						this.cboSubIssuType.BindNLS(replyData.DATATABLE.Copy(), NLSService.GetNLSLabelInfo("CODENAME"), NLSService.GetNLSLabelInfo("CODEID"));
						break;
					case "IMPUTE":
						replyData = _presenter.ExecuteQuery("Get_CodeList", "0001", "MES_UI_QM", RequestType.EXECUTEDATATABLE, "SITEID", UIConstants.SiteId, "CODECLASSID", codeClassId);
						this.cboSubImpute.BindNLS(replyData.DATATABLE.Copy(), NLSService.GetNLSLabelInfo("CODENAME"), NLSService.GetNLSLabelInfo("CODEID"));
						break;
					case "ISSUCAUSE":
						replyData = _presenter.ExecuteQuery("Get_CodeList", "0001", "MES_UI_QM", RequestType.EXECUTEDATATABLE, "SITEID", UIConstants.SiteId, "CODECLASSID", codeClassId);
						this.cboSubIssuCause.BindNLS(replyData.DATATABLE.Copy(), NLSService.GetNLSLabelInfo("CODENAME"), NLSService.GetNLSLabelInfo("CODEID"));
						break;
					case "DIVISIONTYPE":
						replyData = _presenter.ExecuteQuery("Get_CodeList", "0001", "MES_UI_QM", RequestType.EXECUTEDATATABLE, "SITEID", UIConstants.SiteId, "CODECLASSID", codeClassId);
						this.cboSubDivisionType.BindNLS(replyData.DATATABLE.Copy(), NLSService.GetNLSLabelInfo("CODENAME"), NLSService.GetNLSLabelInfo("CODEID"));
						break;
					case "PLANTDIVISIONID":
						replyData = _presenter.ExecuteQuery("Get_QM_MESCodeList", "001", "MES_UI_QM", RequestType.EXECUTEDATATABLE, "SITEID", UIConstants.SiteId, "FACILITYCLASSID", "FACTORY");
						this.cboSubPlantDivisionID.BindNLS(replyData.DATATABLE.Copy(), NLSService.GetNLSLabelInfo("CODENAME"), NLSService.GetNLSLabelInfo("CODEID"));
						break;
					case "TEXTURE":
						replyData = _presenter.ExecuteQuery("GET_QM_ProductKind", "001", "MES_UI_QM", RequestType.EXECUTEDATATABLE, "SITEID", UIConstants.SiteId);
						this.cboTexture.BindData(replyData.DATATABLE.Copy(), true, false, "CODENAME", "CODEID");
						this.cboTexture.SelectFirstItem();
						this.cboSubTexture.BindNLS(replyData.DATATABLE.Copy(), NLSService.GetNLSLabelInfo("CODENAME"), NLSService.GetNLSLabelInfo("CODEID"));
						break;
					case "COMPLAINTTYPE":
						replyData = _presenter.ExecuteQuery("Get_CodeList", "0001", "MES_UI_QM", RequestType.EXECUTEDATATABLE, "SITEID", UIConstants.SiteId, "CODECLASSID", codeClassId);
						this.cboSubComplaintType.BindNLS(replyData.DATATABLE.Copy(), NLSService.GetNLSLabelInfo("CODENAME"), NLSService.GetNLSLabelInfo("CODEID"));
						break;
				}
			}
			catch (Exception ex)
			{
				MesMessageBox.ShowDialog(ex.ToString(), CODESUBTYPE.ERROR, true, null);
			}
		}
		private void InitControls()
		{
			if (UIConstants.departmentCode.StartsWith("4B"))
			{
				for (int i = 0; i < tpgAttachFileManage2.Controls.Count; i++)
					tpgAttachFileManage2.Controls[i].Enabled = false;

				for (int i = 0; i < tpgCustDiscontentSave_QC.Controls.Count; i++)
					tpgCustDiscontentSave_QC.Controls[i].Enabled = false;
			}

			//접수 일자는 오늘 날짜
			this.dtpSubReciveDate.EditValue = DateTime.Now.ToString("yyyy-MM-dd");
			this.txtSubReciverID.Text = UIConstants.UserID;
			this.txtSubReciverName.Text = UIConstants.UserName;
			//this.txtSubReciverName.Text = UIConstants.UserName;
			//this.txtSubReciverName.Text = UIConstants.departmentCode;
			this.btnComplate.Visible = false;
			this.cboSubPrograssState.EditValue = "1"; //진행단계
			this.dtpsOccurrenceDate.dtpFromDate.EditValue = DateTime.Now.AddMonths(-1);
			Hashtable hash = new Hashtable();
			hash["_REQUESTTYPE"] = "INQUIRY";
			hash["_VERSION"] = "0001";
			hash["_CLASSID"] = "MES_UI_RT";

			hash["MENUID"] = _MenuItem.ID;

			MessageData mesRequestData = new MessageData();

			mesRequestData.COMMAND = @"RuleReportGenerate";
			mesRequestData.QUERYID = "Get_GridMasterInfo";
			mesRequestData.SITEID = UIConstants.SiteId;
			mesRequestData.HASHTABLE = hash;
			mesRequestData.COMMANDTYPE = "StoredQueryDataSet";

			MessageData replyData = _MessageService.SendRequestOIMessageData(mesRequestData);

			if (replyData.ISSUCCESS)
			{
				dsGridMasterInfo = replyData.DATASET;

				if (dsGridMasterInfo == null)
					return;

				List<GridColumnProperty> CheckListColumnList = new List<GridColumnProperty>();

				grdList.gridView.OptionsBehavior.Editable = true;

				#region 그리드 설정

				bool isCheckBox = false;
				foreach (DataRow dr in dsGridMasterInfo.Tables[0].AsEnumerable().Where(t => t.Field<string>("GRIDNAME") == "grdList"))
				{
					if (dr["GRIDSUBTYPE"].ToString() == "CHECKBOX")
					{
						RepositoryItemCheckEdit checkEdit = new RepositoryItemCheckEdit();
						checkEdit.NullStyle = DevExpress.XtraEditors.Controls.StyleIndeterminate.Unchecked;
						checkEdit.NullText = "";
						checkEdit.ValueChecked = 1;
						checkEdit.ValueUnchecked = 0;

						CheckListColumnList.Add(new GridColumnProperty(dr["COLUMNNAME"].ToString(), dr.ValidatedValue("LANGUAGECODEID")
							, dr["ISHIDDEN"].ToString() != "Y", false, false, checkEdit, dr["GRIDSIZE"].To<int>()));
						//isCheckBox = true;
					}
					else if (dr["GRIDSUBTYPE"].ToString() == "COMBOBOX")
					{
						RepositoryItemLookUpEdit lookUpEdit = new RepositoryItemLookUpEdit();

						DataTable dtCbo = new DataTable();

						hash = new Hashtable();
						hash["_REQUESTTYPE"] = "INQUERY";
						hash["_VERSION"] = dr["COMBOBOXQUERYVERSION"].ToString();
						hash["_CLASSID"] = dr["COMBOBOXQUERYCLASSID"].ToString();
						hash["MENUID"] = _MenuItem.ID;

						foreach (string s in dr["COMBOBOXPARAMETER"].ToString().Split('|'))
						{
							hash[s.Split(':')[0]] = s.Split(':')[1];
						}

						mesRequestData = new MessageData();

						mesRequestData.COMMAND = @"RuleReportGenerate";
						mesRequestData.QUERYID = dr["COMBOBOXQUERYID"].ToString();
						mesRequestData.SITEID = UIConstants.SiteId;
						mesRequestData.HASHTABLE = hash;
						mesRequestData.COMMANDTYPE = "StoredQueryDataTable";

						replyData = _MessageService.SendRequestOIMessageData(mesRequestData);

						dtCbo = replyData.DATATABLE;

						lookUpEdit.DataSource = dtCbo;
						lookUpEdit.DisplayMember = dr["COMBOBOXDISPLAYMEMBER"].ToString();
						lookUpEdit.ValueMember = dr["COMBOBOXVALUEMEMBER"].ToString();
						lookUpEdit.NullText = string.Empty;
						lookUpEdit.AllowNullInput = DevExpress.Utils.DefaultBoolean.True;

						CheckListColumnList.Add(new GridColumnProperty(dr["COLUMNNAME"].ToString(), dr.ValidatedValue("LANGUAGECODEID")
							, dr["ISHIDDEN"].ToString() != "Y", false, false, lookUpEdit, dr["GRIDSIZE"].To<int>()));

					}
					else
						CheckListColumnList.Add(new GridColumnProperty(dr["COLUMNNAME"].ToString(), dr.ValidatedValue("LANGUAGECODEID")
							, dr["ISHIDDEN"].ToString() != "Y", true, false, dr["GRIDSIZE"].To<int>()));


				}
				grdList.CreateColumns(CheckListColumnList, null, null, null, false, true, false, isCheckBox);

				#endregion //그리드 설정
			}

			dtpsOccurrenceDate.dtpFromDate.DateTime = DateTime.Now.AddDays(-30);
		}

		private void InitializeGrid()
		{
			#region Grid Mapping
			//grdList.DisplayText//(_MenuItem.ID, NLSService.GetNLSLabelInfo("INSTRUMENTMANAGE"), _MessageService, false);
			grdList.DisplayText = NLSService.GetNLSLabelInfo("CUSTOMERDISCONTENTSEARCH");
			grdMail.DisplayText = NLSService.GetNLSLabelInfo("EMPLOYEEMAIL");

			grdAttachFile1.DisplayText = NLSService.GetNLSLabelInfo("ATTACHFILE");
			grdAttachFile2.DisplayText = NLSService.GetNLSLabelInfo("ATTACHFILE");

			List<GridColumnProperty> CheckListColumnList = new List<GridColumnProperty>();

			CheckListColumnList.Add(new GridColumnProperty(SYS_ATTACHFILEMANAGE.ATTACHFILESEQ, true, true, false));
			CheckListColumnList.Add(new GridColumnProperty(SYS_ATTACHFILEMANAGE.SAVEPATH, true, true, false));
			CheckListColumnList.Add(new GridColumnProperty(SYS_ATTACHFILEMANAGE.ATTACHFILENAME, true, true, false));
			CheckListColumnList.Add(new GridColumnProperty(SYS_ATTACHFILEMANAGE.FILETYPE, true, true, false));
			CheckListColumnList.Add(new GridColumnProperty(SYS_ATTACHFILEMANAGE.UPLOADPATH, false, true, false));

			buttonEdit.TextEditStyle = DevExpress.XtraEditors.Controls.TextEditStyles.HideTextEditor;
			buttonEdit.ButtonsStyle = DevExpress.XtraEditors.Controls.BorderStyles.HotFlat;
			buttonEdit.Buttons[0].Kind = DevExpress.XtraEditors.Controls.ButtonPredefines.Glyph;
			buttonEdit.Buttons[0].Caption = NLSService.GetNLSLabelInfo("PREVIEW");
			buttonEdit.Buttons[0].IsDefaultButton = true;

			CheckListColumnList.Add(new GridColumnProperty(SYS_ATTACHFILEMANAGE.PREVIEW, true, false, false, buttonEdit));

			grdAttachFile1.CreateColumns(CheckListColumnList, null, null, null, true, true, false, false);
			grdAttachFile2.CreateColumns(CheckListColumnList, null, null, null, true, true, false, false);

			CheckListColumnList.Clear();
			RepositoryItemCheckEdit checkEdit = new RepositoryItemCheckEdit();
			checkEdit.NullStyle = DevExpress.XtraEditors.Controls.StyleIndeterminate.Unchecked;
			checkEdit.NullText = "";
			checkEdit.ValueChecked = 1;
			checkEdit.ValueUnchecked = 0;

			CheckListColumnList.Add(new GridColumnProperty("CHK", true, true, false, checkEdit));
			CheckListColumnList.Add(new GridColumnProperty("USER", true, true, false));
			CheckListColumnList.Add(new GridColumnProperty("USER_NAME", true, true, false));
			CheckListColumnList.Add(new GridColumnProperty("MAILADDRESS", true, true, false));

			grdMail.CreateColumns(CheckListColumnList, null, null, null, true, true, false, false);
			grdMail.AllowMultiCheck = true;
			#endregion
		}

		private void InitializeTab()
		{
			tpgCustDiscontentSave_SM.Text = NLSService.GetNLSLabelInfo("CUSTOMERDISCONTENTSAVE_SM");
			tpgAttachFileManage1.Text = NLSService.GetNLSLabelInfo("ATTACHFILE(SALES)");
			tpgCustDiscontentSave_QC.Text = NLSService.GetNLSLabelInfo("CUSTOMERDISCONTENTSAVE_QC");
			tpgAttachFileManage2.Text = NLSService.GetNLSLabelInfo("ATTACHFILE(QC)");

			//권한
			//권한그룹이 SALES 혹은 4D(하드코딩)이면 영업 관련 품질이면 품질
            if(UIConstants.departmentCode.Equals(""))
            {
                //영업
                tableLayoutPanel5.Enabled = true;
                tableLayoutPanel3.Enabled = true;
                grdAttachFile1.Enabled = true;

                //품질
                tableLayoutPanel6.Enabled = true;
                tableLayoutPanel4.Enabled = true;
                grdAttachFile2.Enabled = true;
            }
			else if(UIConstants.departmentCode.Substring(0, 2) == "4B" || UIConstants.UserGroup == "SALES" )
			{
				//영업
				tableLayoutPanel5.Enabled = true;
				tableLayoutPanel3.Enabled = true;
				grdAttachFile1.Enabled = true;

				//품질
				tableLayoutPanel6.Enabled = true;
				tableLayoutPanel4.Enabled = true;
				grdAttachFile2.Enabled = true;
			}
			//else if(UIConstants.UserGroup == "QM1" || UIConstants.UserGroup == "QM2" || UIConstants.UserGroup == "QMADMIN")
			else if (UIConstants.UserGroupList.Contains("QM1") || UIConstants.UserGroupList.Contains("QM2") || UIConstants.UserGroupList.Contains("QMADMIN"))
			{
				//영업
				tableLayoutPanel5.Enabled = true;
				tableLayoutPanel3.Enabled = true;
				grdAttachFile1.Enabled = true;

				//품질
				tableLayoutPanel6.Enabled = true;
				tableLayoutPanel4.Enabled = true;
				grdAttachFile2.Enabled = true;
			}
			//else
			//{
			//	//영업
			//	tableLayoutPanel5.Enabled = false;
			//	tableLayoutPanel3.Enabled = false;
			//	grdAttachFile1.Enabled = false;

			//	//품질
			//	tableLayoutPanel6.Enabled = false;
			//	tableLayoutPanel4.Enabled = false;
			//	grdAttachFile2.Enabled = false;
			//}
		}
	}
}

